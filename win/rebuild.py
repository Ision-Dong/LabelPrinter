# -*- coding: utf-8 -*-
import configparser
import random
import sqlite3
import sys
import threading
import time
import webbrowser

import qtawesome
import serial
import xlrd
from datetime import datetime
import os

import xlwt
# Form implementation generated from reading ui file 'rebuild.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QGuiApplication, QFont, QPainter, QColor, QBrush
from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem, QMessageBox, QMainWindow, QAbstractItemView, QInputDialog, \
    QMenu, QApplication, QPushButton, QFontDialog, QLabel, QWidget

from Command.genCommand import Command
from db.sqlite import DBConnector
from sub_window import Ui_Form
from tool import SerialServer, NonContentError
from utils.comports import *
from utils.log import output
from utils.utils import convert_to_hex
from win.Painting import Painter

# Exit Code:
#     11:  User exit.
#      0:   Exit normally

# One line commands as below:

MSN = "f0 f2 36 00 00 00 00 06 77 00 00 00 11"
CCID = "f0 f2 47 00 00 00 00 06 00 00 00 00 00"
FID = "f0 f2 58 00 00 00 00 06 00 00 00 00 00"
LSN1 = "f0 f2 69 00 00 00 00 06 00 00 00 00 00"
LSN2 = "f0 f2 7a 00 00 00 00 06 00 00 00 00 00"
LSN3 = "f0 f2 8b 00 00 00 00 06 00 00 00 00 00"
LSN4 = "f0 f2 9c 00 00 00 00 06 00 00 00 00 00"
LSN5 = "f0 f2 ad 00 00 00 00 06 00 00 00 00 00"
LSN6 = "f0 f2 be 00 00 00 00 06 00 00 00 00 00"
LSN7 = "f0 f2 cf 00 00 00 00 06 00 00 00 00 00"
LSN8 = "f0 f2 d0 00 00 00 00 06 00 00 00 00 00"
LSN9 = "f0 f2 e1 00 00 00 00 06 00 00 00 00 00"
# LSN10 = "f0 f2 e1 00 00 00 00 06 00 00 00 00 11"
# LSN11 = "f0 f2 e1 00 00 00 00 06 00 00 00 00 22"
# LSN12 = "f0 f2 e1 00 00 00 00 06 00 00 00 00 33"
# LSN13 = "f0 f2 e1 00 00 00 00 06 00 00 00 00 44"
# LSN14 = "f0 f2 e1 00 00 00 00 06 00 00 00 00 55"
# LSN15 = "f0 f2 e1 00 00 00 00 06 00 00 00 00 66"
# LSN16 = "f0 f2 e1 00 00 00 00 06 00 00 00 00 77"

IS_DEBUG = False  #  如果是开发环境， 这个变量为True， 窗口会启动一个log output 窗口。 如果客户环境， 该值为false，

LOCK_COUNT = 12

COM_PORTS = get_all_comports()

event = threading.Event()


class Ui_LabelPrinter(QMainWindow):
    def setupUi(self, LabelPrinter):
        self.main = LabelPrinter
        LabelPrinter.setObjectName("LabelPrinter")
        LabelPrinter.resize(1030, 665)
        LabelPrinter.setAcceptDrops(True)
        LabelPrinter.setLayoutDirection(QtCore.Qt.LeftToRight)
        LabelPrinter.setAutoFillBackground(True)
        self.centralwidget = QtWidgets.QWidget(LabelPrinter)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 10, 1017, 631))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.line_2 = QtWidgets.QFrame(self.layoutWidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout_4.addWidget(self.line_2, 0, 3, 1, 1)
        self.line = QtWidgets.QFrame(self.layoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout_4.addWidget(self.line, 0, 1, 1, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_12 = QtWidgets.QLabel(self.layoutWidget)
        self.label_12.setObjectName("label_12")
        self.gridLayout_3.addWidget(self.label_12, 0, 0, 1, 1)
        self.lineEdit_13 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.gridLayout_3.addWidget(self.lineEdit_13, 0, 5, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.layoutWidget)
        self.label_13.setObjectName("label_13")
        self.gridLayout_3.addWidget(self.label_13, 1, 0, 1, 1)
        self.lineEdit_11 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.gridLayout_3.addWidget(self.lineEdit_11, 1, 1, 1, 1)
        self.lineEdit_12 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.gridLayout_3.addWidget(self.lineEdit_12, 0, 3, 1, 1)
        self.label_14 = QtWidgets.QLabel(self.layoutWidget)
        self.label_14.setObjectName("label_14")
        self.gridLayout_3.addWidget(self.label_14, 0, 2, 1, 1)
        self.pushButton_7 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout_3.addWidget(self.pushButton_7, 1, 2, 1, 1)
        self.lineEdit_10 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.gridLayout_3.addWidget(self.lineEdit_10, 0, 1, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.layoutWidget)
        self.label_15.setObjectName("label_15")
        self.gridLayout_3.addWidget(self.label_15, 0, 4, 1, 1)
        self.pushButton_9 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_9.setObjectName("pushButton_9")
        self.gridLayout_3.addWidget(self.pushButton_9, 1, 4, 1, 2)
        self.pushButton_9.clicked.connect(self.run)
        self.pushButton_8 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_8.setObjectName("pushButton_8")
        self.gridLayout_3.addWidget(self.pushButton_8, 1, 3, 1, 1)
        self.gridLayout_4.addLayout(self.gridLayout_3, 0, 4, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 2, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setAutoRepeat(False)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 2, 1, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout.addWidget(self.lineEdit_2, 0, 3, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.print_thread)
        self.gridLayout.addWidget(self.pushButton_2, 2, 2, 1, 2)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.gridLayout.addWidget(self.lineEdit_4, 1, 3, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.layoutWidget)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 2, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.layoutWidget)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.layoutWidget)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 1, 2, 1, 1)
        self.comboBox_2 = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.activated[str].connect(self.set_comport)
        self.gridLayout.addWidget(self.comboBox_2, 0, 1, 1, 1)
        self.comboBox_3 = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.activated[str].connect(self.set_comport)
        self.gridLayout.addWidget(self.comboBox_3, 1, 1, 1, 1)
        self.gridLayout_4.addLayout(self.gridLayout, 0, 0, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.gridLayout_2.addWidget(self.lineEdit_8, 1, 3, 1, 1)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.gridLayout_2.addWidget(self.lineEdit_6, 0, 3, 1, 1)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.gridLayout_2.addWidget(self.lineEdit_7, 1, 1, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.gridLayout_2.addWidget(self.comboBox, 1, 5, 1, 1)
        self.lineEdit_9 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.gridLayout_2.addWidget(self.lineEdit_9, 2, 1, 1, 7)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.gridLayout_2.addWidget(self.lineEdit_5, 0, 1, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.layoutWidget)
        self.label_7.setObjectName("label_7")
        self.gridLayout_2.addWidget(self.label_7, 0, 2, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.layoutWidget)
        self.label_10.setObjectName("label_10")
        self.gridLayout_2.addWidget(self.label_10, 2, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.layoutWidget)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 0, 0, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.layoutWidget)
        self.label_11.setObjectName("label_11")
        self.gridLayout_2.addWidget(self.label_11, 1, 4, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.layoutWidget)
        self.label_9.setObjectName("label_9")
        self.gridLayout_2.addWidget(self.label_9, 1, 2, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.layoutWidget)
        self.label_8.setObjectName("label_8")
        self.gridLayout_2.addWidget(self.label_8, 1, 0, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_2.addWidget(self.pushButton_3, 1, 6, 1, 1)

        self.label_view = QtWidgets.QPushButton(self.layoutWidget)
        self.label_view.setObjectName("pushButton_3")
        self.gridLayout_2.addWidget(self.label_view, 0, 6, 1, 1)
        self.label_view.setText("Review")
        self.label_view.clicked.connect(self.painter)

        self.gridLayout_4.addLayout(self.gridLayout_2, 0, 2, 1, 1)
        self.verticalLayout_4.addLayout(self.gridLayout_4)
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.DataShow = QtWidgets.QTabWidget(self.layoutWidget)
        self.DataShow.setObjectName("DataShow")
        self.DataShow.setCurrentIndex(0)
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.DataShow.addTab(self.tab_3, "")
        self.tableWidget = QtWidgets.QTableWidget(self.tab_3)
        self.tableWidget.setGeometry(QtCore.QRect(0, 2, 1015, 490))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidget.setSelectionMode(QTableWidget.SingleSelection)
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.pushButton_4 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_4.setGeometry(QtCore.QRect(940, 450, 51, 21))
        self.pushButton_4.setObjectName("pushButton_4")

        self.button_4_shadow = QtWidgets.QGraphicsDropShadowEffect()
        self.button_4_shadow.setOffset(0, 5)
        self.button_4_shadow.setBlurRadius(5)
        self.button_4_shadow.setColor(Qt.black)
        self.pushButton_4.setGraphicsEffect(self.button_4_shadow)

        self.pushButton_5 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_5.setGeometry(QtCore.QRect(965, 450, 51, 21))
        self.pushButton_5.setObjectName("pushButton_5")

        self.button_5_shadow = QtWidgets.QGraphicsDropShadowEffect()
        self.button_5_shadow.setOffset(0, 5)
        self.button_5_shadow.setBlurRadius(5)
        self.button_5_shadow.setColor(Qt.black)
        self.pushButton_5.setGraphicsEffect(self.button_5_shadow)
        self.tab_0 = QtWidgets.QWidget()
        self.tab_0.setObjectName("tab_0")
        self.DataShow.addTab(self.tab_0, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.DataShow.addTab(self.tab_4, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.DataShow.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.DataShow.addTab(self.tab_2, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.DataShow.addTab(self.tab_5, "")
        self.gridLayout_5.addWidget(self.DataShow, 0, 0, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout_5, 1, 0, 1, 1)
        self.line_4 = QtWidgets.QFrame(self.layoutWidget)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.gridLayout_6.addWidget(self.line_4, 0, 0, 1, 1)
        self.verticalLayout_4.addLayout(self.gridLayout_6)
        LabelPrinter.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(LabelPrinter)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1030, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuSetting = QtWidgets.QMenu(self.menubar)
        self.menuSetting.setObjectName("menuSetting")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        LabelPrinter.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(LabelPrinter)
        self.statusbar.setObjectName("statusbar")
        LabelPrinter.setStatusBar(self.statusbar)
        self.actionSet_Test_Count = QtWidgets.QAction(LabelPrinter)
        self.actionSet_Test_Count.setObjectName("actionSet_Test_Count")
        self.actionSet_Driver_Lock_Timeout = QtWidgets.QAction(LabelPrinter)
        self.actionSet_Driver_Lock_Timeout.setObjectName("actionSet_Driver_Lock_Timeout")
        self.actionSet_Timeout_After_Lock = QtWidgets.QAction(LabelPrinter)
        self.actionSet_Timeout_After_Lock.setObjectName("actionSet_Timeout_After_Lock")
        self.actionRun = QtWidgets.QAction(LabelPrinter)
        self.actionRun.setObjectName("actionRun")
        self.actionExit = QtWidgets.QAction(LabelPrinter)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.setIcon(qtawesome.icon("mdi.exit-to-app", color='black'))
        self.actionExit.triggered.connect(self.exit)
        self.actionAbout_Me = QtWidgets.QAction(LabelPrinter)
        self.actionAbout_Me.setObjectName("actionAbout_Me")
        self.actionGitHub_URL = QtWidgets.QAction(LabelPrinter)
        self.actionGitHub_URL.setObjectName("actionGitHub_URL")
        self.actionWiki = QtWidgets.QAction(LabelPrinter)
        self.actionWiki.setObjectName("actionWiki")
        self.menuFile.addAction(self.actionExit)
        self.menuFile.addSeparator()
        self.menuSetting.addAction(self.actionSet_Test_Count)
        self.menuSetting.addAction(self.actionSet_Driver_Lock_Timeout)
        self.menuSetting.addAction(self.actionSet_Timeout_After_Lock)
        self.menuSetting.addSeparator()
        self.menuSetting.addAction(self.actionRun)
        self.menuHelp.addAction(self.actionAbout_Me)
        self.menuHelp.addAction(self.actionGitHub_URL)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionWiki)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSetting.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.set_font = QtWidgets.QAction(LabelPrinter)
        self.set_font.setObjectName("actionset_font")

        self.config_path = os.getcwd() + "\config\config.ini"
        self.config = configparser.ConfigParser()
        self.config.read(self.config_path, encoding="utf-8")
        self.load_font()

        self.retranslateUi(LabelPrinter)
        self.DataShow.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(LabelPrinter)
        LabelPrinter.setTabOrder(self.lineEdit_2, self.lineEdit_4)
        LabelPrinter.setTabOrder(self.lineEdit_4, self.pushButton)
        LabelPrinter.setTabOrder(self.pushButton, self.lineEdit_9)
        LabelPrinter.setTabOrder(self.lineEdit_9, self.pushButton_2)
        LabelPrinter.setTabOrder(self.pushButton_2, self.lineEdit_5)
        LabelPrinter.setTabOrder(self.lineEdit_5, self.lineEdit_6)
        LabelPrinter.setTabOrder(self.lineEdit_6, self.lineEdit_7)
        LabelPrinter.setTabOrder(self.lineEdit_7, self.lineEdit_8)
        LabelPrinter.setTabOrder(self.lineEdit_8, self.comboBox)
        LabelPrinter.setTabOrder(self.comboBox, self.pushButton_7)
        LabelPrinter.setTabOrder(self.pushButton_7, self.pushButton_9)
        LabelPrinter.setTabOrder(self.pushButton_9, self.DataShow)
        LabelPrinter.setTabOrder(self.DataShow, self.tableWidget)

        text_x = self.config.get("text", "text_x")
        text_y = self.config.get("text", "text_y")
        self.lineEdit_5.setText(text_x)
        self.lineEdit_6.setText(text_y)

        qr_x = self.config.get("qrcode", "qr_x")
        qr_y = self.config.get("qrcode", "qr_y")
        self.lineEdit_7.setText(qr_x)
        self.lineEdit_8.setText(qr_y)
        qr_size = ["01", "02", "03", "04", "05", "06"]
        self.comboBox.addItems(qr_size)
        self.comboBox.setCurrentText(self.config.get("qrcode", "qr_size"))

        #   set delay
        self.lineEdit_10.setText(self.config.get("delay", "test_count"))
        self.lineEdit_12.setText(self.config.get("delay", "open_delay"))
        self.lineEdit_13.setText(self.config.get("delay", "return_delay"))
        self.lineEdit_11.setText(self.config.get("delay", "close_delay"))

        #   set Model Number
        self.lineEdit_9.setText(self.config.get("model", "number"))

    def retranslateUi(self, LabelPrinter):
        _translate = QtCore.QCoreApplication.translate
        LabelPrinter.setWindowTitle(_translate("LabelPrinter", "LabelPrinter"))
        self.label_12.setText(_translate("LabelPrinter", "Test Count"))
        self.label_13.setText(_translate("LabelPrinter", "Close Delay"))
        self.label_14.setText(_translate("LabelPrinter", "Open Delay"))
        self.pushButton_7.setText(_translate("LabelPrinter", "Authorize"))
        self.label_15.setText(_translate("LabelPrinter", "Return Delay"))
        self.pushButton_9.setText(_translate("LabelPrinter", "Test Start"))
        self.pushButton_8.setText(_translate("LabelPrinter", "Binding"))
        self.pushButton_8.clicked.connect(self.binding)
        self.label.setText(_translate("LabelPrinter", "Printer COM"))
        self.label_2.setText(_translate("LabelPrinter", "Baud Rate"))
        self.pushButton.setText(_translate("LabelPrinter", "Load Data"))
        self.pushButton.clicked.connect(self.view_datas)
        self.pushButton_2.setText(_translate("LabelPrinter", "Print"))
        self.pushButton_2.setIcon(qtawesome.icon("ri.printer-fill", color='white'))
        self.pushButton.setIcon(qtawesome.icon("ri.loader-2-fill", color='black'))
        self.pushButton_3.setIcon(qtawesome.icon("ri.settings-5-fill", color='black'))
        self.pushButton_9.setIcon(qtawesome.icon("msc.run-all", color='white'))

        # Set button shadow.
        self.button_2_shadow = QtWidgets.QGraphicsDropShadowEffect()
        self.button_2_shadow.setOffset(0, 2)
        self.button_2_shadow.setBlurRadius(22)
        self.button_2_shadow.setColor(Qt.black)
        self.pushButton_2.setGraphicsEffect(self.button_2_shadow)

        self.button_9_shadow = QtWidgets.QGraphicsDropShadowEffect()
        self.button_9_shadow.setOffset(0, 2)
        self.button_9_shadow.setBlurRadius(22)
        self.button_9_shadow.setColor(Qt.black)
        self.pushButton_9.setGraphicsEffect(self.button_9_shadow)

        self.label_5.setText(_translate("LabelPrinter", "DataFile Path"))
        self.label_3.setText(_translate("LabelPrinter", "TailLock COM"))
        self.label_4.setText(_translate("LabelPrinter", "Baud Rate"))
        self.label_7.setText(_translate("LabelPrinter", "Text Y"))
        self.label_10.setText(_translate("LabelPrinter", "Model Code"))
        self.label_6.setText(_translate("LabelPrinter", "Text X"))
        self.label_11.setText(_translate("LabelPrinter", "QR Size"))
        self.label_9.setText(_translate("LabelPrinter", "QR Y"))
        self.label_8.setText(_translate("LabelPrinter", "QR X"))
        self.pushButton_3.setText(_translate("LabelPrinter", "Set"))
        self.pushButton_3.clicked.connect(self.setLabelLocation)
        self.pushButton_4.setText(_translate("LabelPrinter", ""))
        self.pushButton_5.setText(_translate("LabelPrinter", ""))
        self.tableWidget.customContextMenuRequested.connect(self.menushow)
        self.DataShow.setTabText(self.DataShow.indexOf(self.tab_3), _translate("LabelPrinter", "Data Show"))
        self.DataShow.setTabText(self.DataShow.indexOf(self.tab_4), _translate("LabelPrinter", "Reserve"))
        self.DataShow.setTabText(self.DataShow.indexOf(self.tab_0), _translate("LabelPrinter", "Reserve"))
        self.DataShow.setTabText(self.DataShow.indexOf(self.tab), _translate("LabelPrinter", "Reserve"))
        self.DataShow.setTabText(self.DataShow.indexOf(self.tab_2), _translate("LabelPrinter", "Reserve"))
        self.DataShow.setTabText(self.DataShow.indexOf(self.tab_5), _translate("LabelPrinter", "Reserve"))

        # Disable the reserver page
        # self.DataShow.setTabEnabled(1, False)
        self.DataShow.setTabEnabled(2, False)
        self.DataShow.setTabEnabled(3, False)
        self.DataShow.setTabEnabled(4, False)
        self.DataShow.setTabEnabled(5, False)

        self.menuFile.setIcon(qtawesome.icon("msc.file", color='black'))
        self.menuFile.setTitle(_translate("LabelPrinter", "File"))
        self.menuSetting.setTitle(_translate("LabelPrinter", "Setting"))
        self.menuSetting.setIcon(qtawesome.icon("ri.user-settings-line", color='black'))
        self.menuHelp.setTitle(_translate("LabelPrinter", "Help"))
        self.menuHelp.setIcon(qtawesome.icon("mdi.help", color='black'))
        self.actionSet_Test_Count.setText(_translate("LabelPrinter", "Set Transparency"))
        self.actionSet_Test_Count.setIcon(qtawesome.icon("mdi.invert-colors", color='black'))
        self.actionSet_Test_Count.triggered.connect(self.change)
        self.actionSet_Driver_Lock_Timeout.setText(_translate("LabelPrinter", "Set Windows Style"))
        self.actionSet_Driver_Lock_Timeout.setIcon(qtawesome.icon("msc.symbol-color", color='black'))
        self.actionSet_Driver_Lock_Timeout.triggered.connect(self.reset_style)
        self.actionSet_Timeout_After_Lock.setText(_translate("LabelPrinter", "Log Output"))
        if IS_DEBUG:
            self.actionSet_Timeout_After_Lock.triggered.connect(self.log_output)
        self.actionSet_Timeout_After_Lock.setIcon(qtawesome.icon("mdi6.message-settings", color='black'))
        self.actionRun.setText(_translate("LabelPrinter", "Run"))
        self.actionRun.setIcon(qtawesome.icon("msc.run-all", color='black'))
        self.actionExit.setText(_translate("LabelPrinter", "Exit"))
        self.actionAbout_Me.setText(_translate("LabelPrinter", "About Me"))
        self.set_font.setText(_translate("LabelPrinter", "Set Font"))
        self.set_font.setIcon(qtawesome.icon("ei.fontsize", color='black'))
        self.menuSetting.addAction(self.set_font)
        self.set_font.triggered.connect(self.set_family_font)
        self.actionAbout_Me.setIcon(qtawesome.icon("ei.info-circle", color='black'))
        self.actionGitHub_URL.setText(_translate("LabelPrinter", "GitHub URL"))
        self.actionGitHub_URL.setIcon(qtawesome.icon("msc.github-alt", color='black'))
        self.actionWiki.setText(_translate("LabelPrinter", "Wiki"))

        # set git hub button layout
        self.pushButton_5.setIcon(qtawesome.icon("fa.github", color='green'))
        self.pushButton_5.setToolTip("Access our github repo...")
        self.pushButton_5.clicked.connect(self.access_github)
        self.pushButton_7.clicked.connect(self.authorize)

        # set status button layout
        self.pushButton_4.setIcon(qtawesome.icon("fa.circle", color='red'))
        self.pushButton_4.setToolTip("Com ports status.")

        # Set input information
        # self.lineEdit_10.setPlaceholderText(": Test Count")
        # self.lineEdit_11.setPlaceholderText(": Close Delay")
        # self.lineEdit_12.setPlaceholderText(": Open Delay")
        # self.lineEdit_13.setPlaceholderText(": Return Delay")

        #   set tab icon
        self.DataShow.setTabIcon(0, qtawesome.icon("mdi6.database-edit-outline", color='green'))

        #   load com ports from system
        self.load_ports()

        #   No edit on tablewidget
        # self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)

        #   set tablewidget to double click
        self.tableWidget.doubleClicked.connect(self.print)

        #   Launch sub windows
        self.log_output_is_open = False

    def painter(self):

        text_x = int(self.lineEdit_5.text())
        text_y = int(self.lineEdit_6.text())

        qr_x = int(self.lineEdit_7.text())
        qr_y = int(self.lineEdit_8.text())

        class PainterQwidget(QWidget):

            def paintEvent(self, a0: QtGui.QPaintEvent) -> None:
                qp = QPainter()
                qp.begin(self)
                qp.setPen(QColor(Qt.black))
                qp.setFont(QFont('Arial', 13))
                line_height = 8
                qp.drawText(text_x * 1.88, 28 + line_height, "SN:F0F23600000000067700000011")
                qp.drawText(text_x * 1.88, 48 + line_height, "MODEL CODE:")
                qp.drawText(text_x * 1.88, 68 + line_height, "P604BFA06XXA")
                qp.drawText(text_x * 1.88, 88 + line_height, "INPUT:DC5V/1A")
                qp.drawText(text_x * 1.88, 108 + line_height, "WWW.MOCOCHI.COM")
                qp.drawText(text_x * 1.88, 128 + line_height, "MADE IN CHINA\t              10/23")
                qp.fillRect(qr_x-30, qr_y-20, 70, 70, QBrush(Qt.SolidPattern))
                qp.end()

        width = 310
        height = 165
        self.paint = PainterQwidget()
        self.paint.setStyleSheet(
"""
PainterQwidget{
    background-color: white;
}
"""
        )
        self.label_draw = Painter()
        self.paint.setFixedSize(width, height)
        # self.paint.setWindowFlag(QtCore.Qt.WindowCloseButtonHint, False) # disable close button.
        self.paint.setWindowIcon(qtawesome.icon("ri.printer-fill", color='red'))
        self.label_draw.setupUi(self.paint)
        self.paint.show()

    def load_font(self):
        font = QFont(*eval(self.config.get("font", "family")))
        if font != "":
            labels = self.main.findChildren(QLabel)
            for label in labels:
                label.setFont(font)

            buttons = self.main.findChildren(QPushButton)
            for button in buttons:
                button.setFont(font)

            widgets = self.main.findChildren(QWidget)
            for widget in widgets:
                widget.setFont(font)

    def set_family_font(self):
        font, ok = QFontDialog.getFont()

        if ok:
            labels = self.main.findChildren(QLabel)
            for label in labels:
                label.setFont(font)

            buttons = self.main.findChildren(QPushButton)
            for button in buttons:
                button.setFont(font)

            widgets = self.main.findChildren(QWidget)
            for widget in widgets:
                widget.setFont(font)

            self.config.set("font", "family", str((font.family(), int(font.key().split(",")[1]))))
            self.config.write(open(self.config_path, "w"))

    def change(self):
        name, ok = QInputDialog.getText(self, 'Rename Page', 'Please enter new value:')
        try:
            self.main.setWindowOpacity(float(name))
        except ValueError:
            ...

    def reset_style(self):
        self.start_color = ["#CCFBFF", "#EAD6EE", "#EEBD89", "#F9957F", "#EAE5C9", "#EF33B1", "#9FA5D5", "#C973FF", "#0C7BB3"]
        self.end_color = ["#EF96C5", "#A0F1EA", "#D13ABD", "#F2F5D0", "#6CC6CB", "#F6E6BC", "#E8F5C8", "#AEBAF8", "#F2BAE8"]
        color = random.choice(self.start_color)
        style = """
        QMainWindow{
            background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 %s,stop:.9 %s);
            border-radius: 7px;
        }
        QPushButton#pushButton_2:hover{
        border-radius: 7px;
        background-color: GREEN;
        font-size: 18px;
        color: white;
        border: 2px solid gray;
        }
        QPushButton#pushButton_9:hover{
                border-radius: 7px;
                background-color: GREEN;
                font-size: 13px;
                color: white;
                border: 2px solid gray;
        }
        
        QPushButton#pushButton_2{
                background-color: RED;
                width: 10px;
                height: 30px;
                border-radius: 7px;
        }
        
        QPushButton#pushButton_9{
                background-color: RED;
                width: 2px;
                height: 30px;
                border-radius: 7px;
        }
        
        QPushButton#pushButton_9:pressed
        {
            background-color:rgb(14 , 135 , 228);
            padding-left:3px;
            padding-top:3px;
        }
        
        QPushButton#pushButton_2:pressed
        {
            background-color:rgb(14 , 135 , 228);
            padding-left:3px;
            padding-top:3px;
        }
        
        QPushButton#pushButton_5 {
            background-color: transparent;
        }
        
        QPushButton#pushButton_4 {
            background-color: transparent;
        }
        QTabWidget::pane{border-width:1px;border-color:gray;border-style: outset;background-color:white}
        QTabBar::tab{width:80px; border-width:1px;border-color:gray;border-bottom-color: #C2C7CB;border-top-left-radius: 15px;border-top-right-radius: 5px; font: 10px ; padding: 4px;}
        QTabBar::tab:first:selected{ margin-left: 0; font-weight: bold;margin-right: 0;color: white}
        QTabBar::tab:first:!selected {color: white;margin-left: 0; font-weight: bold;margin-right: 0;background-color:#DCDCDC}
        QTabBar::tab:middle:selected{ margin-left: 0; margin-right: 0;font-weight: bold;color: white}
        QTabBar::tab:middle:!selected {color: white;margin-left: 0; font-weight: bold;margin-right: 0;background-color:#DCDCDC}
        QTabBar::tab:last:selected{ margin-left: 0; margin-right: 0;font-weight: bold;color: white}
        QTabBar::tab:last:!selected {color: white;margin-left: 0; font-weight: bold;margin-right: 0;background-color:#DCDCDC}
        """% (color, self.end_color[self.start_color.index(color)])
        self.main.setStyleSheet(style)

        index = self.start_color.index(color)
        self.start_color.pop(index)
        self.end_color.pop(index)

        if len(self.start_color) == 0:
            self.start_color = ["#CCFBFF", "#EAD6EE", "#EEBD89", "#F9957F", "#EAE5C9", "#EF33B1", "#9FA5D5", "#C973FF",
                                "#0C7BB3"]
            self.end_color = ["#EF96C5", "#A0F1EA", "#D13ABD", "#F2F5D0", "#6CC6CB", "#F6E6BC", "#E8F5C8", "#AEBAF8",
                              "#F2BAE8"]

    def access_github(self):
        webbrowser.open("https://github.com/intel-sandbox/LabelPrinter", new=0)

    def openFile(self):
        fileName = QtWidgets.QFileDialog.getOpenFileName(self, "open", "C:/", "Execl Files (*.csv, *.xlsx)")
        self.data = fileName
        self.load_data()

    def load_data(self):
        self.only_print_QR = False
        try:
            sheet = xlrd.open_workbook(self.data[0])
        except Exception:
            self.alert_message("Please select the data file first!")
            return
        for s in sheet.sheet_names():
            table = sheet.sheet_by_name(s)
            self.all_rows = [table.row(item) for item in range(table.nrows)]
            self.tableWidget.setSelectionMode(QTableWidget.SingleSelection)
            self.tableWidget.setRowCount(table.nrows - 1)
            self.tableWidget.setColumnCount(len(table.row(0)))
            header = self.all_rows[0]
            self.tableWidget.setHorizontalHeaderLabels([i.value for i in header])
            for index, row in enumerate(self.all_rows[1:]):
                for in_, item in enumerate(row):
                    self.tableWidget.setColumnWidth(in_, 125)
                    self.tableWidget.setItem(index, in_, QTableWidgetItem(str(item.value)))

    def alert_message(self, message):
        messageBox = QMessageBox(QMessageBox.Icon(3), "Error", message, QMessageBox.Ok, self)
        messageBox.button(QMessageBox.Ok).setText("yes")
        reply = messageBox.exec()
        from utils import log
        if reply == QMessageBox.Ok:
            log.output(message=message)

    def setLabelLocation(self):
        self.config.set("text", "text_x", self.lineEdit_5.text())
        self.config.set("text", "text_y", self.lineEdit_6.text())
        self.config.write(open(self.config_path, "w"))

        self.config.set("qrcode", "qr_x", self.lineEdit_7.text())
        self.config.set("qrcode", "qr_y", self.lineEdit_8.text())

        size = self.comboBox.itemText(self.comboBox.currentIndex())
        self.config.set("qrcode", "qr_size", size)

        model_number = self.lineEdit_9.text()
        self.config.set("model", "number", model_number)
        self.config.write(open(self.config_path, "w"))

    def set_delay(self):
        self.config.set("delay", "test_count", self.lineEdit_10.text())
        self.config.set("delay", "open_delay", self.lineEdit_12.text())
        self.config.set("delay", "return_delay", self.lineEdit_13.text())
        self.config.set("delay", "close_delay", self.lineEdit_11.text())
        self.config.write(open(self.config_path, "w"))

    def load_ports(self):
        print_port = self.config.get("ports", "print_port")
        taillock_port = self.config.get("ports", "taillock_port")
        if print_port == "" and taillock_port == "":
            try:
                self.comboBox_2.addItems(COM_PORTS)
                self.comboBox_3.addItems(COM_PORTS)

                self.lineEdit_2.setText("115200")
                self.lineEdit_4.setText("115200")

                self.pushButton_4.setIcon(qtawesome.icon("fa.circle", color='green'))
            except serial.SerialException:
                ...
        else:
            self.comboBox_2.addItem(print_port)
            self.comboBox_3.addItem(taillock_port)
            self.lineEdit_2.setText("115200")
            self.lineEdit_4.setText("115200")
            self.lineEdit_2.setDisabled(True)
            self.lineEdit_4.setDisabled(True)
            self.comboBox_2.setDisabled(True)
            self.comboBox_3.setDisabled(True)
            self.pushButton_4.setIcon(qtawesome.icon("fa.circle", color='green'))

    def set_comport(self):
        current_widget = self.main.focusWidget()
        if current_widget == self.comboBox_2:
            current = self.comboBox_2.currentIndex()
            taillock_index = current - 1 if current == len(COM_PORTS) - 1 else current + 1
            self.comboBox_3.setCurrentIndex(taillock_index)
        elif current_widget == self.comboBox_3:
            current = self.comboBox_3.currentIndex()
            print_index = current - 1 if current == len(COM_PORTS) - 1 else current + 1
            self.comboBox_2.setCurrentIndex(print_index)

        self.config.set("ports", "print_port", self.comboBox_2.itemText(self.comboBox_2.currentIndex()))
        self.config.set("ports", "taillock_port", self.comboBox_3.itemText(self.comboBox_3.currentIndex()))
        self.config.write(open(self.config_path, "w"))

    def connector(self):
        connect = Command(com_port=self.comboBox_2.itemText(self.comboBox_2.currentIndex()),
                          text_x=int(self.lineEdit_5.text()),
                          text_y=int(self.lineEdit_6.text()),
                          qr_x=int(self.lineEdit_7.text()),
                          qr_y=int(self.lineEdit_8.text()),
                          qr_size=int(self.comboBox.itemText(self.comboBox.currentIndex())),
        )
        return connect

    def sendCommand(self, data):
        sn = "SN:" + data
        model_code = "MODEL CODE:"
        model_code_content = self.lineEdit_9.text()
        input = "INPUT:DC5V/1A"
        access = "WWW.MOCOCHI.COM"
        made = "MADE IN CHINA"
        date = str(datetime.date(datetime.now()).month) + "/" + str(datetime.date(datetime.now()).year)[2:]
        made_date = made + "          " + date
        connect = self.connector()
        command = connect.gen_command(
            (connect.gen_text_command, sn),
            (connect.gen_text_command, model_code),
            (connect.gen_text_command, model_code_content),
            (connect.gen_text_command, input),
            (connect.gen_text_command, access),
            (connect.gen_text_command, made_date),
            (connect.gen_QR_command, sn),
        )
        command = convert_to_hex(command)
        connect.send(command)
        status = connect.get_print_status()
        connect.close()

        return status

    def view_datas(self, headers=None):
        cur = DBConnector()
        self.tableWidget.clear()
        columns = cur.get_columns()
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        cur.select()
        datas = []
        for d in cur.datas:
            datas.append(d)

        if not datas:
            self.tableWidget.setRowCount(0)
            self.tableWidget.setColumnCount(0)
            return

        try:
            self.tableWidget.setRowCount(len(datas))
            self.tableWidget.setColumnCount(len(datas[0]))
            self.tableWidget.setHorizontalHeaderLabels(headers or columns)
        except Exception:
            pass

        for index, d in enumerate(datas):
            for in_, v in enumerate(d):
                self.tableWidget.setColumnWidth(in_, 200)
                self.tableWidget.setItem(index, in_, QTableWidgetItem(v))

        cur.close()

    def print_thread(self):
        t2 = threading.Thread(target=self.print)
        t2.start()

    def print(self):

        # Disable all widgets.
        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            if button != self.pushButton_2:
                button.setDisabled(True)

        taillock_com = self.comboBox_3.itemText(self.comboBox_3.currentIndex())
        commands = ['MSN', 'CCID', 'FID'] + [key for key in globals().keys() if "LSN" in key]
        if not self.log_output_is_open and IS_DEBUG:
            self.log_output()
        try:
            con = SerialServer(
                com=self.comboBox_3.itemText(self.comboBox_3.currentIndex()),
                #   Get the args set from app.
                output_to=self.ui2.text if IS_DEBUG else None
            )
        except AttributeError:
            con = SerialServer(
                com=self.comboBox_3.itemText(self.comboBox_3.currentIndex()),
                #   Get the args set from app.
                output_to=self.ui2.text if IS_DEBUG else None
            )
        finally:
            return_data = {}
            output("Ready to read device data.....", output_to=self.ui2.text if IS_DEBUG else None)
            for count, command in enumerate(commands):
                output("#######################   The next data   #######################", output_to=self.ui2.text if IS_DEBUG else None)
                try:
                    con.cmd_base = globals()[command].split(" ")
                    con.send()
                    return_data[command] = con.recv().replace(" ", "")
                except NonContentError as ex:
                    self.alert_message("Did not get any content from current com port. \n-\tCom ports are ready? \n-\tor select a wrong com port?")
                    return

            cur = DBConnector(**return_data)
            cur.insert(return_data["MSN"])
            sn = return_data["MSN"]
            cur.update(sn)
            cur.close()

            self.view_datas()

            try:
                self.sendCommand(sn.replace(" ", ""))
            except AttributeError:
                ...

        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            if button != self.pushButton_2:
                button.setDisabled(False)

    def menushow(self, pos):

        row = self.tableWidget.rowAt(pos.y())
        column = self.tableWidget.columnAt(pos.x())
        if self.tableWidget.item(row, column) in self.tableWidget.selectedItems():
            menu = QMenu(self.tableWidget)
            re_name = menu.addAction("Rename Column")
            re_name.setIcon(qtawesome.icon("mdi.database-edit", color='gray'))
            export = menu.addAction("Export")
            export.setIcon(qtawesome.icon("mdi.database-export", color='gray'))
            del_column = menu.addAction("Delete")
            del_column.setIcon(qtawesome.icon("fa.remove", color='gray'))
            action = menu.exec_(self.tableWidget.mapToGlobal(pos))
            try:
                if action.text() == "Export":
                    t = threading.Thread(target=self.__export)
                    t.start()
                    t.join()
                elif action.text() == "Delete":
                    self.__delete()
                elif action.text() == "Rename Column":
                    try:
                        self.rename_column()
                    except sqlite3.OperationalError:
                        ...
            except AttributeError:
                pass

    def rename_column(self):
        name, ok = QInputDialog.getText(self, 'Rename Page', 'Please enter new name:')
        cur = DBConnector()
        if name == "":
            return
        cur.rename(prefix=name)
        self.view_datas()

    def __export(self):
        cursor = DBConnector()
        workbook = xlwt.Workbook(encoding="utf-8")
        sheet = workbook.add_sheet("device")
        header = cursor.get_columns()
        for i in header:
            sheet.write(0, header.index(i), i)

        cursor.select()
        datas = []
        for data in cursor.datas:
            datas.append(data)

        for d in range(len(datas)):
            for index, d1 in enumerate(datas[d]):
                sheet.write(d + 1, index, datas[d][index])

        savepath = "device.csv"
        workbook.save(savepath)

        cursor.close()

    def __delete(self):
        sn = self.tableWidget.item(self.tableWidget.currentRow(), 1).text()
        cursor = DBConnector()
        cursor.delete(sn)
        cursor.close()

        self.view_datas()

    def log_output(self):
        if not self.log_output_is_open:
            self.form2 = QtWidgets.QWidget()
            self.ui2 = Ui_Form()
            self.form2.setFixedSize(650, 666)
            self.form2.setWindowFlag(QtCore.Qt.WindowCloseButtonHint, False)
            self.form2.setWindowIcon(qtawesome.icon("ri.printer-fill", color='red'))
            self.ui2.setupUi(self.form2)
            self.form2.show()
            self.log_output_is_open = True

    def authorize(self):
        con = SerialServer(
            com=self.comboBox_3.itemText(self.comboBox_3.currentIndex()),
            #   Get the args set from app.
            output_to=self.ui2.text if IS_DEBUG else None
        )
        try:
            # Do auth
            con.cmd_base = MSN.split(" ")  # .split(" ")  Convert command to arrary
            con.send()
            back = con.recv()

            con.cmd_base = con.AUTH.split(" ") + back.split(" ") # .split(" ")  Convert command to arrary
            con.send()
            back = con.recv()
            output("Return code: " + back, output_to=self.ui2.text if IS_DEBUG else None)
        except NonContentError:
            self.alert_message("Did not get any content from current com port. \n-\tCom ports are ready? \n-\tor select a wrong com port?")
            return

    def binding(self):
        con = SerialServer(
            com=self.comboBox_3.itemText(self.comboBox_3.currentIndex()),
            #   Get the args set from app.
            output_to=self.ui2.text if IS_DEBUG else None
        )

        try:
            # Do bingding
            con.cmd_base = FID.split(" ") # .split(" ")  Convert command to arrary
            con.send()
            back = con.recv()

            con.cmd_base = con.AUTH.split(" ") + back.split(" ")  # .split(" ")  Convert command to arrary
            con.send()
            back = con.recv()
            output("Return code: " + back, output_to=self.ui2.text if IS_DEBUG else None)
        except NonContentError:
            self.alert_message("Did not get any content from current com port. \n-\tCom ports are ready? \n-\tor select a wrong com port?")
            return

    def run(self):
        t1 = threading.Thread(target=self.flow_start)
        if self.pushButton_9.text() == "Test Start":
            event.clear()
            self.pushButton_9.setText("Test Stop")
            self.pushButton_9.setIcon(qtawesome.icon("mdi.stop", color='white'))
            t1.start()
        elif self.pushButton_9.text() == "Test Stop":
            event.set()
            self.pushButton_9.setText("Test Start")
            self.pushButton_9.setIcon(qtawesome.icon("msc.debug-start", color='white'))
            buttons = self.main.findChildren(QPushButton)
            for button in buttons:
                if button != self.pushButton_9:
                    button.setDisabled(False)

    def flow_start(self):

        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            if button != self.pushButton_9:
                button.setDisabled(True)

        count = str(self.config.get("delay", "test_count")) != self.lineEdit_10.text()
        open_delay = str(self.config.get("delay", "open_delay")) != self.lineEdit_12.text()
        return_delay = str(self.config.get("delay", "return_delay")) != self.lineEdit_13.text()
        close_delay = str(self.config.get("delay", "close_delay")) != self.lineEdit_11.text()

        if count or open_delay or return_delay or close_delay:
            self.set_delay()

        #   Here has clicked the start button. Ready to start the flow.
        #   Create serial connector and connect the com port.
        con = SerialServer(
            com=self.comboBox_3.itemText(self.comboBox_3.currentIndex()),
            #   Get the args set from app.
            output_to=self.ui2.text if IS_DEBUG else None
        )
        test_count = self.lineEdit_10.text()

        try:
            #   Do binding
            con.cmd_base = con.BINDING.split(" ")   # convert to hex list type to send to tail lock com port
            con.send()
            back = con.recv()

            # Do get status.
            con.cmd_base = con.GET_STATUS.split(" ")
            con.send()
            back = con.recv()   # back: need return hex data.
            if 0:#back != "1":
                self.alert_message("All devices do not open!")  #  Popup warning message here and wait user response..
            else:
                times = 2
                test_count = int(test_count)
                while int(test_count):
                    if event.is_set():
                        break
                    # Driver Lock shutdown
                    con.cmd_base = con.SHUTDOWN.split(" ")
                    con.send()
                    back = con.recv()

                    while times:
                        # Check Lock status, delay 1 second. and check two times.
                        con.cmd_base = con.GET_STATUS.split(" ")
                        con.send()
                        back = con.recv()
                        time.sleep(1/1000)  # 1sleep 100 ms
                        times -= 1

                    con.cmd_base = con.MOTOR_DRIVE_BACK.split(" ")
                    con.send()
                    back = con.recv()
                    # TODO: Record the Lock status here.

                    con.cmd_base = con.UNLOCK_ALL.split(" ")
                    con.send()
                    back = con.recv()
                    # TODO: Record the unLock status here.
                    test_count -= 1

                # Pass delay time, Please use below variables.
                # test_count = self.lineEdit_10.text(),
                # open_delay = self.lineEdit_12.text(),
                # close_delay = self.lineEdit_11.text(),
                # return_delay = self.lineEdit_13.text()
        except NonContentError:
            self.alert_message("Did not get any content from current com port. Com ports are ready? or select a wrong com port?")
            return

        self.pushButton_9.setText("Test Start")
        self.pushButton_9.setIcon(qtawesome.icon("msc.debug-start", color='white'))

        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            if button != self.pushButton_9:
                button.setDisabled(False)

    def exit(self):
        self.form2.close()
        sys.exit(11)
