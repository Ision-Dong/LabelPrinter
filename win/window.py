# -*- coding: utf-8 -*-
import configparser
import os
import re
import sqlite3
import threading
import time
import webbrowser

import serial
import xlwt
from datetime import datetime

import qtawesome
import xlrd
# Form implementation generated from reading ui file 'rebuild.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMessageBox, QMainWindow, QTableWidgetItem, QTableWidget, QMenu, QAbstractItemView, \
    QInputDialog

from Command.genCommand import Command
from connect.SerialPort import SerialPort
from db.sqlite import DBConnector
from tool import SerialServer
from utils.ComOperator import sender, reader
from utils.comports import get_all_comports
from utils.log import output
from utils.utils import convert_to_hex


class Ui_Form(QMainWindow):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1095, 453)
        self.layoutWidget = QtWidgets.QWidget(Form)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 10, 1071, 161))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.groupBox_2 = QtWidgets.QGroupBox(self.layoutWidget)
        self.groupBox_2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.groupBox_2.setToolTipDuration(-5)
        self.groupBox_2.setStyleSheet("QGroupBox {\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #E0E0E0, stop: 1 #FFFFFF);\n"
"    border: 2px solid gray;\n"
"    border-radius: 5px;\n"
"    margin-top: 1ex; /* leave space at the top for the title */\n"
"}\n"
"QGroupBox::title {\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center; /* position at the top center */\n"
"    padding: 0 3px;\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #CCCCCC, stop: 1 #FFFFFF);\n"
"    padding-top: 5px;\n"
"    border-radius:5px;\n"
"}")
        self.groupBox_2.setFlat(True)
        self.groupBox_2.setCheckable(True)
        self.groupBox_2.setObjectName("groupBox_2")
        self.layoutWidget_2 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget_2.setGeometry(QtCore.QRect(10, 30, 331, 51))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget_2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_4 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_3.addWidget(self.label_4)
        self.comboBox_4 = QtWidgets.QComboBox(self.layoutWidget_2)
        self.comboBox_4.setObjectName("comboBox_4")
        self.horizontalLayout_3.addWidget(self.comboBox_4)
        self.label_5 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_3.addWidget(self.label_5)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.horizontalLayout_3.addWidget(self.lineEdit_5)
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget_2)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.load_ports)
        self.horizontalLayout_3.addWidget(self.pushButton)
        self.layoutWidget_3 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget_3.setGeometry(QtCore.QRect(10, 90, 331, 57))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.layoutWidget_3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.layoutWidget_3)
        self.lineEdit_6.setStyleSheet("QLienEdit#lineEdit_6:hover {\n"
"    background-color: red;\n"
"}")
        self.lineEdit_6.setLocale(QtCore.QLocale(QtCore.QLocale.Dutch, QtCore.QLocale.Netherlands))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.horizontalLayout_4.addWidget(self.lineEdit_6)
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget_3)
        self.pushButton_2.clicked.connect(self.openFile)
        self.pushButton_2.setToolTip("")
        self.pushButton_2.setStyleSheet("QPushButton:hover{\n"
"        background-color: blue;\n"
"        border-radius:5px;\n"
"        border-color: blue;\n"
"        border-style:outset;\n"
"        border:10px white;\n"
"        color:white;\n"
"        width: 50px;\n"
"        height: 100px;\n"
"}\n"
"QPushButton:default {\n"
"    border-color: red;\n"
"}\n"
"")
        icon = QtGui.QIcon.fromTheme("ri.save-fill")
        self.pushButton_2.setIcon(icon)
        self.pushButton_2.setAutoDefault(True)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_4.addWidget(self.pushButton_2)
        self.pushButton_6 = QtWidgets.QPushButton(self.layoutWidget_3)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.print_page)
        self.horizontalLayout_4.addWidget(self.pushButton_6)
        self.horizontalLayout_5.addWidget(self.groupBox_2)
        self.line_3 = QtWidgets.QFrame(self.layoutWidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.horizontalLayout_5.addWidget(self.line_3)
        self.groupBox_3 = QtWidgets.QGroupBox(self.layoutWidget)
        self.groupBox_3.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.groupBox_3.setToolTipDuration(-5)
        self.groupBox_3.setStyleSheet("QGroupBox {\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #E0E0E0, stop: 1 #FFFFFF);\n"
"    border: 2px solid gray;\n"
"    border-radius: 5px;\n"
"    margin-top: 1ex; /* leave space at the top for the title */\n"
"}\n"
"QGroupBox::title {\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center; /* position at the top center */\n"
"    padding: 0 3px;\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #CCCCCC, stop: 1 #FFFFFF);\n"
"    padding-top: 5px;\n"
"    border-radius:5px;\n"
"}")
        self.groupBox_3.setFlat(True)
        self.groupBox_3.setCheckable(True)
        self.groupBox_3.setObjectName("groupBox_3")
        self.layoutWidget_4 = QtWidgets.QWidget(self.groupBox_3)
        self.layoutWidget_4.setGeometry(QtCore.QRect(10, 30, 331, 41))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.layoutWidget_4)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_6 = QtWidgets.QLabel(self.layoutWidget_4)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_6.addWidget(self.label_6)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.layoutWidget_4)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.horizontalLayout_6.addWidget(self.lineEdit_7)
        self.label_7 = QtWidgets.QLabel(self.layoutWidget_4)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_6.addWidget(self.label_7)
        self.lineEdit_8 = QtWidgets.QLineEdit(self.layoutWidget_4)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.horizontalLayout_6.addWidget(self.lineEdit_8)
        self.pushButton_4 = QtWidgets.QPushButton(self.layoutWidget_4)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.setIcon(qtawesome.icon("ri.settings-5-fill", color='red'))
        self.pushButton_4.clicked.connect(self.setTextLocation)
        self.horizontalLayout_6.addWidget(self.pushButton_4)
        self.layoutWidget_5 = QtWidgets.QWidget(self.groupBox_3)
        self.layoutWidget_5.setGeometry(QtCore.QRect(10, 90, 331, 51))
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.layoutWidget_5)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_8 = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_7.addWidget(self.label_8)
        self.lineEdit_9 = QtWidgets.QLineEdit(self.layoutWidget_5)
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.horizontalLayout_7.addWidget(self.lineEdit_9)
        self.label_9 = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_7.addWidget(self.label_9)
        self.lineEdit_10 = QtWidgets.QLineEdit(self.layoutWidget_5)
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.horizontalLayout_7.addWidget(self.lineEdit_10)
        self.label = QtWidgets.QLabel(self.layoutWidget_5)
        self.label.setObjectName("label")
        self.horizontalLayout_7.addWidget(self.label)
        self.comboBox_3 = QtWidgets.QComboBox(self.layoutWidget_5)
        self.comboBox_3.setObjectName("comboBox_3")
        self.horizontalLayout_7.addWidget(self.comboBox_3)
        self.pushButton_3 = QtWidgets.QPushButton(self.layoutWidget_5)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_7.addWidget(self.pushButton_3)
        self.horizontalLayout_5.addWidget(self.groupBox_3)
        self.line_4 = QtWidgets.QFrame(self.layoutWidget)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.horizontalLayout_5.addWidget(self.line_4)
        self.groupBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.groupBox.setStyleSheet("QGroupBox {\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #E0E0E0, stop: 1 #FFFFFF);\n"
"    border: 2px solid gray;\n"
"    border-radius: 5px;\n"
"    margin-top: 1ex; /* leave space at the top for the title */\n"
"}\n"
"QGroupBox::title {\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center; /* position at the top center */\n"
"    padding: 0 3px;\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #CCCCCC, stop: 1 #FFFFFF);\n"
"    padding-top: 5px;\n"
"    border-radius:5px;\n"
"}")
        self.groupBox.setFlat(True)
        self.groupBox.setCheckable(True)
        self.groupBox.setObjectName("groupBox")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setGeometry(QtCore.QRect(160, 60, 101, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton.setGeometry(QtCore.QRect(160, 30, 90, 17))
        self.radioButton.setObjectName("radioButton")
        self.radioButton.setIcon(qtawesome.icon("ri.printer-fill", color='red'))
        self.radioButton.setToolTip("If here was selected, it will print by automatically..")
        self.radioButton.setChecked(True)
        self.radioButton.toggled.connect(self.switch)
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(30, 30, 41, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(30, 60, 41, 16))
        self.label_3.setObjectName("label_3")
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(60, 30, 69, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_2.setGeometry(QtCore.QRect(60, 60, 69, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_7.setGeometry(QtCore.QRect(10, 100, 61, 21))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.load_ports)
        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_8.setGeometry(QtCore.QRect(80, 100, 61, 21))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_9.setGeometry(QtCore.QRect(270, 60, 61, 21))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.send_sn)
        self.line_2 = QtWidgets.QFrame(self.groupBox)
        self.line_2.setGeometry(QtCore.QRect(140, 20, 20, 131))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_3.setGeometry(QtCore.QRect(160, 90, 101, 21))
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_10 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_10.setGeometry(QtCore.QRect(270, 90, 61, 21))
        self.pushButton_10.setObjectName("pushButton_10")
        # self.pushButton_15 = QtWidgets.QPushButton(self.groupBox)
        # self.pushButton_15.setGeometry(QtCore.QRect(270, 28, 61, 21))
        # self.pushButton_15.setObjectName("pushButton_15")
        # self.pushButton_15.setText("PRINT")
        # self.pushButton_15.clicked.connect(self.print_QR_code)
        self.pushButton_16 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_16.setGeometry(QtCore.QRect(270, 120, 61, 21))
        self.pushButton_16.setObjectName("pushButton_15")
        self.pushButton_16.setText("SEARCH")
        self.pushButton_16.clicked.connect(self.view_datas)
        self.lineEdit_23 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_23.setGeometry(QtCore.QRect(160, 120, 101, 21))
        self.lineEdit_23.setText("")
        self.lineEdit_23.setObjectName("lineEdit_3")
        self.lineEdit_23.setPlaceholderText(":Search SN from db")
        self.horizontalLayout_5.addWidget(self.groupBox)
        self.verticalLayoutWidget = QtWidgets.QWidget(Form)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 180, 1071, 271))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.line = QtWidgets.QFrame(self.verticalLayoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.tableWidget = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.tableWidget.setToolTipDuration(2)
        self.tableWidget.setLineWidth(2)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayout.addWidget(self.tableWidget)
        self.pushButton_6.setIcon(qtawesome.icon("ri.printer-fill", color='red'))

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        if self.radioButton.isChecked():
            self.pushButton_10.setDisabled(True)

        self.is_loaded = False  # This flag's purpose is marked the combox widget had loaded the ports data
        self.only_print_QR = False

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Label Printer"))
        self.groupBox_2.setTitle(_translate("Form", "COM PORTS"))
        self.label_4.setText(_translate("Form", "ComPort:  "))
        self.label_5.setText(_translate("Form", "Baud: "))
        self.pushButton.setIcon(qtawesome.icon("fa.toggle-off", color='red'))
        self.pushButton_2.setText(_translate("Form", "LOAD"))
        self.pushButton_6.setText(_translate("Form", "PRINT"))
        self.groupBox_3.setTitle(_translate("Form", "LAYOUT SETTING"))
        self.label_6.setText(_translate("Form", "Text X: "))
        self.lineEdit_6.setPlaceholderText("Data path:")
        self.label_7.setText(_translate("Form", "Text Y: "))
        self.pushButton_4.setText(_translate("Form", "SET"))
        self.label_8.setText(_translate("Form", "QR X: "))
        self.label_9.setText(_translate("Form", "QR Y: "))
        self.label.setText(_translate("Form", "QR SIZE: "))
        self.pushButton_3.setText(_translate("Form", "SET"))
        self.pushButton_3.setIcon(qtawesome.icon("ri.settings-5-fill", color='red'))
        self.pushButton_2.setIcon(qtawesome.icon("mdi6.folder-open", color='red'))
        self.groupBox.setTitle(_translate("Form", "SCAN DEVICE"))
        self.radioButton.setText(_translate("Form", "Auto Print"))
        self.label_2.setText(_translate("Form", "TX:"))
        self.label_3.setText(_translate("Form", "DX:"))
        self.pushButton_7.setText(_translate("Form", "LOAD"))
        self.pushButton_7.setIcon(qtawesome.icon("ri.loader-3-line", color='red'))
        self.pushButton_8.setText(_translate("Form", "SET"))
        self.pushButton_8.setIcon(qtawesome.icon("ri.settings-5-fill", color='red'))
        self.pushButton_8.setDisabled(True)
        self.pushButton_9.setText(_translate("Form", "SEND"))
        self.pushButton_9.setIcon(qtawesome.icon("fa.send", color='green'))
        self.pushButton_10.setText(_translate("Form", "PRINT"))
        self.pushButton_10.clicked.connect(self.print_QR_code)
        self.pushButton_10.setIcon(qtawesome.icon("ri.printer-fill", color='green'))
        self.status_button = QtWidgets.QPushButton(Form)
        self.status_button.setGeometry(QtCore.QRect(10, 450, 20, 25))
        self.status_button.setObjectName("status_button")
        self.status_button.setIcon(qtawesome.icon("msc.layout-statusbar", color='gray'))
        self.label_11 = QtWidgets.QLabel(Form)
        self.label_11.setGeometry(QtCore.QRect(35, 455, 791, 16))
        self.label_11.setText("")
        self.label_11.setObjectName("label_11")
        self.pushButton_12 = QtWidgets.QPushButton(Form)
        self.pushButton_12.setGeometry(QtCore.QRect(1040, 450, 31, 23))
        self.pushButton_12.setText("")
        self.pushButton_12.setFlat(True)
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_13 = QtWidgets.QPushButton(Form)
        self.pushButton_13.setGeometry(QtCore.QRect(1010, 450, 31, 23))
        self.pushButton_13.setText("")
        self.pushButton_13.setFlat(True)
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_13.setIcon(qtawesome.icon("fa.circle", color='red'))
        self.pushButton_13.setToolTip("Com ports status.")
        self.pushButton_12.setIcon(qtawesome.icon("fa.github", color='white'))
        self.pushButton_12.setToolTip("Access our github repo...")
        self.pushButton_12.clicked.connect(self.github)
        # self.pushButton_15.setIcon(qtawesome.icon("ri.printer-fill", color='green'))
        self.pushButton_16.setIcon(qtawesome.icon("mdi6.database-search", color='green'))
        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidget.customContextMenuRequested.connect(self.menushow)
        self.tableWidget.doubleClicked.connect(self.print_single_row)

        self.config_path = os.getcwd() + "\config\config.ini"
        self.config = configparser.ConfigParser()
        self.config.read(self.config_path, encoding="utf-8")
        text_x = self.config.get("text", "text_x")
        text_y = self.config.get("text", "text_y")
        self.lineEdit_7.setText(text_x)
        self.lineEdit_8.setText(text_y)

        qr_x = self.config.get("qrcode", "qr_x")
        qr_y = self.config.get("qrcode", "qr_y")
        self.lineEdit_9.setText(qr_x)
        self.lineEdit_10.setText(qr_y)
        qr_size = ["01", "02", "03", "04", "05", "06"]
        self.comboBox_3.addItems(qr_size)
        self.comboBox_3.setCurrentText("05")
        self.comport = None
        self.print_count = 1

    def github(self):
        webbrowser.open("https://github.com/intel-sandbox/LabelPrinter", new=0)


    def __Message(self, message:int=0, message_type_=True):
        """

        :param message_type_: True: normal, False: errors.
        :param message: normal[message]   or  errors[message]
        :return:
        """
        from . import normal, errors
        if message_type_:
            self.label_11.setText(normal[message])
            self.label_11.setStyleSheet("""
                QLabel#label_11 {
                    color: green;
                }
            """)
            self.status_button.setIcon(qtawesome.icon("msc.layout-statusbar", color='green'))
        else:
            self.label_11.setText(errors[message])
            self.label_11.setStyleSheet("""
            QLabel#label_11 {
                color: red;
            }
            """)
            self.status_button.setIcon(qtawesome.icon("msc.layout-statusbar", color='red'))

    def send_sn(self):
        self.lineEdit_3.setText("")
        s = SerialServer(com="COM6")
        s.convert(self.lineEdit_2.text(), add_=True)
        s.cmd_base.append(s.checksum(s.cmd_base))
        s.send()
        content = s.recv()
        self.lineEdit_3.setText(content)
        s.close()

    def rec_sn(self):
        self.lineEdit_3.setText("")
        reader(self.comboBox_2.itemText(self.comboBox_2.currentIndex()), self.lineEdit_5.text(), self.lineEdit_3)
        if self.radioButton.isChecked() and self.lineEdit_3.text() != "":
            self.print_QR_code()

    def switch(self):
        if self.radioButton.isChecked():
            self.pushButton_10.setDisabled(True)
        else:
            self.pushButton_10.setDisabled(False)

    def is_connectable(self):
        is_con = []
        for port in self.comport:
            serial = SerialPort(portName=port, baudrate=115200)
            is_con.append(serial.is_opened())

        return all(is_con)

    def load_ports(self):
        self.comport = get_all_comports()
        if not self.is_loaded:
            if self.is_connectable():
                self.pushButton_13.setIcon(qtawesome.icon("fa.circle", color='green'))
                self.pushButton.setIcon(qtawesome.icon("fa.toggle-on", color='green'))
                # TODO: Here has an issue, It will be fixed after.
                self.comboBox_4.addItems(self.comport)
                self.comboBox.addItems(self.comport)
                self.comboBox_2.addItems(self.comport)
                self.lineEdit_5.setText("115200")
                self.lineEdit_5.setDisabled(True)
                self.is_loaded = True
                self.__Message(0)

    def openFile(self):
        if self.lineEdit_6.text() == "":
            fileName = QtWidgets.QFileDialog.getOpenFileName(self, "open", "C:/", "Execl Files (*.csv, *.xlsx)")
            self.lineEdit_6.setText(fileName[0])
            self.data = fileName

        try:
            if self.lineEdit_6.text() == "":
                self.__Message(1, False)
                return

            self.load_data()
            self.__Message(1)
        except Exception as ex:
            return

    def load_data(self):
        self.only_print_QR = False
        try:
            sheet = xlrd.open_workbook(self.data[0])
        except Exception:
            self.alert_message("Please select the data file first!")
            return
        for s in sheet.sheet_names():
            table = sheet.sheet_by_name(s)
            self.all_rows = [table.row(item) for item in range(table.nrows)]
            self.tableWidget.setSelectionMode(QTableWidget.SingleSelection)
            self.tableWidget.setRowCount(table.nrows - 1)
            self.tableWidget.setColumnCount(len(table.row(0)))
            header = self.all_rows[0]
            self.tableWidget.setHorizontalHeaderLabels([i.value for i in header])
            for index, row in enumerate(self.all_rows[1:]):
                 for in_, item in enumerate(row):
                     self.tableWidget.setColumnWidth(in_, 200)
                     date = str(datetime.date(datetime.now()))
                     if in_ == len(row) - 1:
                         self.tableWidget.setItem(index, in_, QTableWidgetItem(date))
                         self.all_rows[index + 1][in_] = date
                     else:
                         self.tableWidget.setItem(index, in_, QTableWidgetItem(item.value))


    def print_page(self):
        _translate = QtCore.QCoreApplication.translate
        if self.print_count == 1:
            self.pushButton_7 = QtWidgets.QPushButton(self.layoutWidget_3)
            self.horizontalLayout_4.addWidget(self.pushButton_7)
            self.pushButton_7.setText(_translate("Form", "CUR ROW"))
            self.pushButton_8 = QtWidgets.QPushButton(self.layoutWidget_3)
            self.horizontalLayout_4.addWidget(self.pushButton_8)
            self.pushButton_8.setText(_translate("Form", "ALL ROWS"))
            self.print_count += 1

            self.pushButton_7.clicked.connect(self.print_single_row)
            self.pushButton_8.clicked.connect(self.print_all_rows)

            self.pushButton_6.setDisabled(True)

    def connector(self):
        connect = Command(com_port=self.comboBox_4.itemText(self.comboBox_4.currentIndex()),
                          text_x=int(self.lineEdit_7.text()),
                          text_y=int(self.lineEdit_8.text()),
                          qr_x=int(self.lineEdit_9.text()),
                          qr_y=int(self.lineEdit_10.text()),
                          qr_size=int(self.comboBox_3.itemText(self.comboBox_3.currentIndex())),
        )
        return connect

    def sendCommand(self, data):
        str1, str2, str3, str4, str5, str6 = [(self.all_rows[0][index].value) + ": "+ (d.value if type(d) == xlrd.sheet.Cell else d) for index, d in enumerate(data)]
        connect = self.connector()
        command = connect.gen_command(
            (connect.gen_text_command, str1),
            (connect.gen_text_command, str2),
            (connect.gen_text_command, str5),
            (connect.gen_text_command, str3),
            (connect.gen_text_command, str4),
            (connect.gen_text_command, str6),
            (connect.gen_text_command, str6),
            (connect.gen_QR_command, str1),
        )
        command = convert_to_hex(command)
        connect.send(command)
        status = connect.get_print_status()
        connect.close()

        return status

    def print_single_row(self):
        cursor = DBConnector()
        if self.only_print_QR:
            self.print_QR_code()
            return
        try:
            if self.tableWidget.currentRow() == -1:
                status = self.sendCommand(self.all_rows[self.tableWidget.currentRow() + 1 + 1])
                cursor.insert(self.all_rows[self.tableWidget.currentRow() + 1 + 1][0].value) if status else ...
            else:
                status = self.sendCommand(self.all_rows[self.tableWidget.currentRow() + 1])
                cursor.insert(self.all_rows[self.tableWidget.currentRow() + 1][0].value) if status else ...
        except AttributeError:
            self.__Message(6, message_type_=False)
        except serial.serialutil.SerialException:
            self.__Message(0, False)

        cursor.close()

    def print_all_rows(self):
        cursor = DBConnector()
        for row in self.all_rows[1:]:
            status = self.sendCommand(row)
            cursor.insert(row[0].value) if status else ...
            time.sleep(1)

        cursor.close()

    def setTextLocation(self):
        self.config.set("text", "text_x", self.lineEdit_7.text())
        self.config.set("text", "text_y", self.lineEdit_8.text())
        self.config.write(open(self.config_path, "w"))

    def setQRSize(self):
        self.config.set("qrcode", "qr_x", self.lineEdit_9.text())
        self.config.set("qrcode", "qr_y", self.lineEdit_10.text())
        self.config.write(open(self.config_path, "w"))

    def alert_message(self, message):
        messageBox = QMessageBox(QMessageBox.Information, "Error", message, QMessageBox.Ok, self)
        messageBox.button(QMessageBox.Ok).setText("yes")
        reply = messageBox.exec()
        from utils import log
        if reply == QMessageBox.Ok:
            log.output(message=message)

    def print_QR_code(self):
        cursor = DBConnector()
        try:
            connect = self.connector()
        except Exception as ex:
            self.alert_message(message="Please complete the pre-condition. Raise Error as below: {}".format(ex))
            return
        command = connect.gen_command(
            (connect.gen_QR_command, "SN: " + self.lineEdit_2.text()),
        )
        command = convert_to_hex(command)
        connect.send(command)
        connect.close()

        if connect.get_print_status():
            cursor.insert(self.lineEdit_2.text(), self.lineEdit_3.text())
            cursor.close()

    def view_datas(self, headers=None):
        cur = DBConnector()
        self.tableWidget.clear()
        columns = ["SN", "_date"] if cur.get_columns() == ["SN", "_date"] else cur.get_columns()
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        cur.select(SN=self.lineEdit_23.text() or None)
        datas = []
        for d in cur.datas:
            datas.append(d)

        self.__Message(6) if datas else self.__Message(8, False)    # Show message to the Label


        if not datas:
            self.__Message(5, message_type_=False)
            self.tableWidget.setRowCount(0)
            self.tableWidget.setColumnCount(0)
            return

        try:
            self.tableWidget.setRowCount(len(datas))
            self.tableWidget.setColumnCount(len(datas[0]))
            self.tableWidget.setHorizontalHeaderLabels(headers or columns)
        except Exception:
            pass

        for index, d in enumerate(datas):
            for in_, v in enumerate(d):
                self.tableWidget.setColumnWidth(in_, 200)
                self.tableWidget.setItem(index, in_, QTableWidgetItem(v))

        self.only_print_QR = True   # Switch data source.
        cur.close()

    def menushow(self, pos):

        if self.only_print_QR:
            row = self.tableWidget.rowAt(pos.y())
            column = self.tableWidget.columnAt(pos.x())
            if self.tableWidget.item(row, column) in self.tableWidget.selectedItems():
                menu = QMenu(self.tableWidget)
                re_name = menu.addAction("Rename Column")
                re_name.setIcon(qtawesome.icon("mdi.database-edit", color='gray'))
                export = menu.addAction("Export")
                export.setIcon(qtawesome.icon("mdi.database-export", color='gray'))
                add_column = menu.addAction("Add Column")
                add_column.setIcon(qtawesome.icon("msc.add", color='gray'))
                del_column = menu.addAction("Delete Column")
                del_column.setIcon(qtawesome.icon("fa.remove", color='gray'))
                delete = menu.addAction("Delete")
                delete.setIcon(qtawesome.icon("mdi.delete", color='gray'))
                delete_all = menu.addAction("Delete All")
                delete_all.setIcon(qtawesome.icon("mdi.delete-circle", color='gray'))
                action = menu.exec_(self.tableWidget.mapToGlobal(pos))
                try:
                    if action.text() == "Export":
                        t = threading.Thread(target=self.__export)
                        t.start()
                        t.join()
                    elif action.text() == "Delete":
                        self.__delete()
                    elif action.text() == "Rename Column":
                        try:
                            self.rename_column()
                        except sqlite3.OperationalError:
                            ...
                    elif action.text() == "Delete All":
                        self.__delete_all()
                    elif action.text() == "Add Column":
                        self.add_column()
                    elif action.text() == "Delete Column":
                        self.delete_column()
                except AttributeError:
                    pass

    def rename_column(self):
        name, ok = QInputDialog.getText(self, 'Rename Page', 'Please enter new name:')
        cur = DBConnector()
        if name == "":
            self.__Message(9, message_type_=False)
            return
        cur.rename(prefix=name)
        self.view_datas()

    def add_column(self):
        cur = DBConnector()
        content_columns = cur.get_columns()
        # find the max cmd command.
        the_max = re.findall(r"\d+", [max_ for max_ in content_columns if "CMD" in max_][-1])[0]

        # add 1 from max cmd command
        the_max = "CMD" + str(int(the_max) + 1)
        content_columns.insert(-2, the_max)

        # add column into the db
        cur.add_column(the_max)
        self.tableWidget.clear()
        self.view_datas(headers=cur.get_columns())
        self.tableWidget.viewport().update()

        cur.close()

    def delete_column(self):
        pass

    def __export(self):
        cursor = DBConnector()
        workbook = xlwt.Workbook(encoding="utf-8")
        sheet = workbook.add_sheet("device")
        header = cursor.get_columns()
        for i in header:
            sheet.write(0, header.index(i), i)

        cursor.select()
        datas = []
        for data in cursor.datas:
            datas.append(data)

        for d in range(len(datas)):
            for index, d1 in enumerate(datas[d]):
                sheet.write(d + 1, index, datas[d][index])

        savepath = "device.csv"
        workbook.save(savepath)

        cursor.close()

    def __delete(self):
        sn = self.tableWidget.item(self.tableWidget.currentRow(), 0).text()
        cursor = DBConnector()
        cursor.delete(sn)
        cursor.close()

        self.view_datas()

    def __delete_all(self):
        cursor = DBConnector()
        cursor.select()
        cursor.delete(all_=True)
        cursor.close()

        self.view_datas()



