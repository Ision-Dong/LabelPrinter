# -*- coding: utf-8 -*-
import configparser
import os
import random
import sqlite3
import sys
import threading
import time
from datetime import datetime

import qtawesome
import serial
import xlwt
# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtCore import Qt, QSize

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont, QPainter, QColor, QBrush
from PyQt5.QtWidgets import QInputDialog, QMainWindow, QPushButton, QFontDialog, QLabel, QWidget, QTableWidgetItem, \
    QAbstractItemView, QMessageBox, QMenu, QTableWidget, QTextEdit, QLineEdit

from Command.genCommand import Command
from db.sqlite import DBConnector
from tool import NonContentError, SerialServer
from utils.comports import get_all_comports
from utils.log import output
from utils.utils import convert_to_hex
from win.Painting import Painter

COM_PORTS = get_all_comports()

event = threading.Event()

MSN = "F0 F2 A2 01 00 A3"
CCID = "F0 F2 A1 01 00 A2"
FID = "F0 F2 A3 01 00 A4"
LSN1 = "F0 F2 A4 01 01 A6"
LSN2 = "F0 F2 A4 01 02 A7"
LSN3 = "F0 F2 A4 01 03 A8"
LSN4 = "F0 F2 A4 01 04 A9"
LSN5 = "F0 F2 A4 01 05 AA"
LSN6 = "F0 F2 A4 01 06 AB"
LSN7 = "F0 F2 A4 01 07 AC"
LSN8 = "F0 F2 A4 01 08 AD"
LSN9 = "F0 F2 A4 01 09 AE"
# LSN10 = "F0 F2 A4 01 0A AF"
# LSN11 = "F0 F2 A4 01 0B AE"
# LSN12 = "F0 F2 A4 01 0C AE"

icon_size = 25, 25
DELAY_TIME = 0.5
CONNECT = None


class LineEdit(QLineEdit):

    COMMNAD_LENGHT = None
    RELATED_WIDGET = None

    def focusOutEvent(self, a0: QtGui.QFocusEvent) -> None:
        self.COMMNAD_LENGHT = int(self.text())
        disable_child = self.RELATED_WIDGET.findChildren(QLineEdit)[3 + self.COMMNAD_LENGHT:]
        enable_child = self.RELATED_WIDGET.findChildren(QLineEdit)[:3 + self.COMMNAD_LENGHT]
        for child in enable_child:
            child.setDisabled(False)

        for child in disable_child:
            child.setDisabled(True)


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        self.main = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1268, 775)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setObjectName("comboBox")
        self.horizontalLayout.addWidget(self.comboBox)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setText("")
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout.addWidget(self.pushButton_8)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setObjectName("comboBox_2")
        self.horizontalLayout_2.addWidget(self.comboBox_2)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_2.addWidget(self.label_4)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_2)
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setText("")
        self.pushButton_9.setObjectName("pushButton_9")
        self.horizontalLayout_2.addWidget(self.pushButton_9)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_3.addWidget(self.label_5)
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setText("")
        self.pushButton_10.setObjectName("pushButton_10")
        self.horizontalLayout_3.addWidget(self.pushButton_10)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setText("")
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_3.addWidget(self.pushButton_2)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4.addLayout(self.verticalLayout)
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setStyleSheet("")
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.horizontalLayout_4.addWidget(self.line_4)
        self.horizontalLayout_9.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_5.addWidget(self.label_6)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalLayout_5.addWidget(self.lineEdit_3)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_5.addWidget(self.label_7)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.horizontalLayout_5.addWidget(self.lineEdit_4)
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setText("")
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_5.addWidget(self.label_16)
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setObjectName("label_18")
        self.horizontalLayout_5.addWidget(self.label_18)
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setText("")
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_5.addWidget(self.label_17)
        self.lineEdit_12 = LineEdit(self.centralwidget)
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.horizontalLayout_5.addWidget(self.lineEdit_12)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_5.addWidget(self.pushButton_3)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_6.addWidget(self.label_8)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.horizontalLayout_6.addWidget(self.lineEdit_5)
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_6.addWidget(self.label_9)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.horizontalLayout_6.addWidget(self.lineEdit_6)
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_6.addWidget(self.label_10)
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setObjectName("comboBox_3")
        self.horizontalLayout_6.addWidget(self.comboBox_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_6.addWidget(self.pushButton_4)
        self.verticalLayout_2.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_7.addWidget(self.label_11)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.horizontalLayout_7.addWidget(self.lineEdit_7)
        self.verticalLayout_2.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_8.addLayout(self.verticalLayout_2)
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.horizontalLayout_8.addWidget(self.line_5)
        self.horizontalLayout_9.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_12.addLayout(self.horizontalLayout_9)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_10.addWidget(self.label_13)
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.horizontalLayout_10.addWidget(self.lineEdit_8)
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_10.addWidget(self.label_12)
        self.lineEdit_9 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.horizontalLayout_10.addWidget(self.lineEdit_9)
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_10.addWidget(self.label_14)
        self.lineEdit_10 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.horizontalLayout_10.addWidget(self.lineEdit_10)
        self.verticalLayout_3.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_11.addWidget(self.label_15)
        self.lineEdit_11 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_11.setText("")
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.horizontalLayout_11.addWidget(self.lineEdit_11)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_11.addWidget(self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_11.addWidget(self.pushButton_6)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout_11.addWidget(self.pushButton_7)
        self.pushButton_stop = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_stop.setObjectName("pushButton_stop")
        self.horizontalLayout_11.addWidget(self.pushButton_stop)
        self.verticalLayout_3.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_12.addLayout(self.verticalLayout_3)
        self.verticalLayout_4.addLayout(self.horizontalLayout_12)
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.verticalLayout_4.addWidget(self.line_6)
        self.verticalLayout_6.addLayout(self.verticalLayout_4)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectItems)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayout_5.addWidget(self.tableWidget)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.tab_2)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.splitter = QtWidgets.QSplitter(self.tab_2)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.widget = QtWidgets.QWidget(self.splitter)
        self.widget.setObjectName("widget")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.groupBox = QtWidgets.QGroupBox(self.widget)
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_25 = QtWidgets.QLabel(self.groupBox)
        self.label_25.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_25.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_25.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_25.setObjectName("label_25")
        self.horizontalLayout_13.addWidget(self.label_25)
        self.lineEdit_19 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_19.setObjectName("lineEdit_19")
        self.horizontalLayout_13.addWidget(self.lineEdit_19)
        self.verticalLayout_8.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.label_19 = QtWidgets.QLabel(self.groupBox)
        self.label_19.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_19.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_19.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_19.setObjectName("label_19")
        self.horizontalLayout_17.addWidget(self.label_19)
        self.lineEdit_13 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.horizontalLayout_17.addWidget(self.lineEdit_13)
        self.verticalLayout_8.addLayout(self.horizontalLayout_17)
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.label_20 = QtWidgets.QLabel(self.groupBox)
        self.label_20.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_20.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_20.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_20.setObjectName("label_20")
        self.horizontalLayout_18.addWidget(self.label_20)
        self.lineEdit_14 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.horizontalLayout_18.addWidget(self.lineEdit_14)
        self.verticalLayout_8.addLayout(self.horizontalLayout_18)
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.label_21 = QtWidgets.QLabel(self.groupBox)
        self.label_21.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_21.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_21.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_21.setObjectName("label_21")
        self.horizontalLayout_19.addWidget(self.label_21)
        self.lineEdit_15 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.horizontalLayout_19.addWidget(self.lineEdit_15)
        self.verticalLayout_8.addLayout(self.horizontalLayout_19)
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.label_22 = QtWidgets.QLabel(self.groupBox)
        self.label_22.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_22.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_22.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_22.setObjectName("label_22")
        self.horizontalLayout_20.addWidget(self.label_22)
        self.lineEdit_16 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.horizontalLayout_20.addWidget(self.lineEdit_16)
        self.verticalLayout_8.addLayout(self.horizontalLayout_20)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.label_23 = QtWidgets.QLabel(self.groupBox)
        self.label_23.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_23.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_23.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_23.setObjectName("label_23")
        self.horizontalLayout_21.addWidget(self.label_23)
        self.lineEdit_17 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_17.setObjectName("lineEdit_17")
        self.horizontalLayout_21.addWidget(self.lineEdit_17)
        self.verticalLayout_8.addLayout(self.horizontalLayout_21)
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.label_24 = QtWidgets.QLabel(self.groupBox)
        self.label_24.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_24.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_24.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_24.setObjectName("label_24")
        self.horizontalLayout_22.addWidget(self.label_24)
        self.lineEdit_18 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.horizontalLayout_22.addWidget(self.lineEdit_18)
        self.verticalLayout_8.addLayout(self.horizontalLayout_22)
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.label_26 = QtWidgets.QLabel(self.groupBox)
        self.label_26.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_26.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_26.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_26.setObjectName("label_26")
        self.horizontalLayout_23.addWidget(self.label_26)
        self.lineEdit_20 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_20.setObjectName("lineEdit_20")
        self.horizontalLayout_23.addWidget(self.lineEdit_20)
        self.verticalLayout_8.addLayout(self.horizontalLayout_23)
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.label_27 = QtWidgets.QLabel(self.groupBox)
        self.label_27.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_27.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_27.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.horizontalLayout_24.addWidget(self.label_27)
        self.lineEdit_21 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_21.setObjectName("lineEdit_21")
        self.horizontalLayout_24.addWidget(self.lineEdit_21)
        self.verticalLayout_8.addLayout(self.horizontalLayout_24)
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.label_28 = QtWidgets.QLabel(self.groupBox)
        self.label_28.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_28.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_28.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_28.setObjectName("label_28")
        self.horizontalLayout_25.addWidget(self.label_28)
        self.lineEdit_22 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_22.setObjectName("lineEdit_22")
        self.horizontalLayout_25.addWidget(self.lineEdit_22)
        self.verticalLayout_8.addLayout(self.horizontalLayout_25)
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.label_29 = QtWidgets.QLabel(self.groupBox)
        self.label_29.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_29.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_29.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_29.setObjectName("label_29")
        self.horizontalLayout_26.addWidget(self.label_29)
        self.lineEdit_23 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_23.setObjectName("lineEdit_23")
        self.horizontalLayout_26.addWidget(self.lineEdit_23)
        self.verticalLayout_8.addLayout(self.horizontalLayout_26)
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.label_30 = QtWidgets.QLabel(self.groupBox)
        self.label_30.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.label_30.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_30.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_30.setObjectName("label_30")
        self.horizontalLayout_27.addWidget(self.label_30)
        self.lineEdit_24 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_24.setObjectName("lineEdit_24")
        self.horizontalLayout_27.addWidget(self.lineEdit_24)
        self.verticalLayout_8.addLayout(self.horizontalLayout_27)
        self.pushButton_12 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_12.setObjectName("pushButton_12")
        self.verticalLayout_8.addWidget(self.pushButton_12)
        self.horizontalLayout_14.addLayout(self.verticalLayout_8)
        self.horizontalLayout_15.addWidget(self.groupBox)
        self.line = QtWidgets.QFrame(self.widget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout_15.addWidget(self.line)
        self.widget1 = QtWidgets.QWidget(self.splitter)
        self.widget1.setObjectName("widget1")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.line_2 = QtWidgets.QFrame(self.widget1)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout_2.addWidget(self.line_2, 1, 0, 1, 2)
        self.groupBox_3 = QtWidgets.QGroupBox(self.widget1)
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_2.addWidget(self.groupBox_3, 0, 1, 1, 1)
        self.groupBox_2 = QtWidgets.QGroupBox(self.widget1)
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_2.addWidget(self.groupBox_2, 0, 0, 1, 1)
        self.groupBox_5 = QtWidgets.QGroupBox(self.widget1)
        self.groupBox_5.setObjectName("groupBox_5")
        self.gridLayout_2.addWidget(self.groupBox_5, 2, 0, 1, 1)
        self.groupBox_4 = QtWidgets.QGroupBox(self.widget1)
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_2.addWidget(self.groupBox_4, 2, 1, 1, 1)
        self.verticalLayout_9.addLayout(self.gridLayout_2)
        self.line_3 = QtWidgets.QFrame(self.widget1)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout_9.addWidget(self.line_3)
        self.groupBox_6 = QtWidgets.QGroupBox(self.widget1)
        self.groupBox_6.setObjectName("groupBox_6")
        self.verticalLayout_9.addWidget(self.groupBox_6)
        self.horizontalLayout_16.addWidget(self.splitter)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.tabWidget.addTab(self.tab_5, "")
        self.verticalLayout_6.addWidget(self.tabWidget)
        self.verticalLayout_7.addLayout(self.verticalLayout_6)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1268, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionSet_Transparency = QtWidgets.QAction(MainWindow)
        self.actionSet_Transparency.setObjectName("actionSet_Transparency")
        self.actionSet_Window_Style = QtWidgets.QAction(MainWindow)
        self.actionSet_Window_Style.setObjectName("actionSet_Window_Style")
        self.actionSet_Font = QtWidgets.QAction(MainWindow)
        self.actionSet_Font.setObjectName("actionSet_Font")
        self.actionRun = QtWidgets.QAction(MainWindow)
        self.actionRun.setObjectName("actionRun")
        self.actionAbout_Me = QtWidgets.QAction(MainWindow)
        self.actionAbout_Me.setObjectName("actionAbout_Me")
        self.menuFile.addAction(self.actionExit)
        self.menuView.addAction(self.actionSet_Transparency)
        self.menuView.addAction(self.actionSet_Window_Style)
        self.menuView.addAction(self.actionSet_Font)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionRun)
        self.menuHelp.addAction(self.actionAbout_Me)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.config_path = os.getcwd() + "\config\config.ini"
        self.config = configparser.ConfigParser()
        self.config.read(self.config_path, encoding="utf-8")

        self.retranslateUi(MainWindow)
        self.bind_actions()
        self.init_window()
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Label Printer"))
        self.label.setText(_translate("MainWindow", "Printer COM:"))
        self.label_3.setText(_translate("MainWindow", "Baud Rate:"))
        self.label_2.setText(_translate("MainWindow", "TailLock COM:"))
        self.label_4.setText(_translate("MainWindow", "Baud Rate:"))
        self.label_5.setText(_translate("MainWindow", "DataFile Path"))
        self.pushButton.setText(_translate("MainWindow", "Load Data"))
        self.label_6.setText(_translate("MainWindow", "Text X:"))
        self.label_7.setText(_translate("MainWindow", "Text Y:"))
        self.label_18.setText(_translate("MainWindow", "Lock Number:"))
        self.pushButton_3.setText(_translate("MainWindow", "Review"))
        self.label_8.setText(_translate("MainWindow", "QR X:"))
        self.label_9.setText(_translate("MainWindow", "QR Y:"))
        self.label_10.setText(_translate("MainWindow", "QR Size:"))
        self.pushButton_4.setText(_translate("MainWindow", "Set"))
        self.label_11.setText(_translate("MainWindow", "Model Code:"))
        self.label_13.setText(_translate("MainWindow", "Test Count:"))
        self.label_12.setText(_translate("MainWindow", "Open Delay:"))
        self.label_14.setText(_translate("MainWindow", "Return Delay:"))
        self.label_15.setText(_translate("MainWindow", "Close Delay:"))
        self.pushButton_5.setText(_translate("MainWindow", "Authorize"))
        self.pushButton_6.setText(_translate("MainWindow", "Binding"))
        self.pushButton_7.setText(_translate("MainWindow", "Test Start"))
        self.pushButton_stop.setText(_translate("MainWindow", "Test Stop"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Data Show"))
        self.groupBox.setTitle(_translate("MainWindow", "COMMANDS"))
        self.label_25.setText(_translate("MainWindow", "MSN"))
        self.label_19.setText(_translate("MainWindow", "CCID"))
        self.label_20.setText(_translate("MainWindow", "FID"))
        self.label_21.setText(_translate("MainWindow", "LSN1"))
        self.label_22.setText(_translate("MainWindow", "LSN2"))
        self.label_23.setText(_translate("MainWindow", "LSN3"))
        self.label_24.setText(_translate("MainWindow", "LSN4"))
        self.label_26.setText(_translate("MainWindow", "LSN5"))
        self.label_27.setText(_translate("MainWindow", "LSN6"))
        self.label_28.setText(_translate("MainWindow", "LSN7"))
        self.label_29.setText(_translate("MainWindow", "LSN8"))
        self.label_30.setText(_translate("MainWindow", "LSN9"))
        self.pushButton_12.setText(_translate("MainWindow", "UPDATE"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Reserve"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Reserve"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Reserve"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Reserve"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Reserve"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Commands"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Reserve"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Reserve"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "Reserve"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuView.setTitle(_translate("MainWindow", "Setting"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionSet_Transparency.setText(_translate("MainWindow", "Set Transparency"))
        self.actionSet_Window_Style.setText(_translate("MainWindow", "Set Window Style"))
        self.actionSet_Font.setText(_translate("MainWindow", "Set Font"))
        self.actionRun.setText(_translate("MainWindow", "Reload"))
        self.actionAbout_Me.setText(_translate("MainWindow", "About Me"))
        self.pushButton_stop.setVisible(False)

    def bind_actions(self):
        self.actionExit.triggered.connect(self.exit)
        self.actionSet_Transparency.triggered.connect(self.set_Transparency)
        self.actionSet_Window_Style.triggered.connect(self.reset_style)
        self.actionSet_Font.triggered.connect(self.set_family_font)
        self.actionRun.triggered.connect(self.reload)
        self.comboBox.activated[str].connect(self.set_comport)
        self.comboBox_2.activated[str].connect(self.set_comport)
        self.pushButton.clicked.connect(self.view_datas)
        self.pushButton_2.clicked.connect(self.print_thread)
        self.pushButton_3.clicked.connect(self.painter)
        self.pushButton_4.clicked.connect(self.setLabelLocation)
        self.pushButton_5.clicked.connect(self.authorize)
        self.pushButton_6.clicked.connect(self.binding)
        self.pushButton_7.clicked.connect(self.run)
        self.pushButton_12.clicked.connect(self.update_commands)
        self.tableWidget.customContextMenuRequested.connect(self.menushow)
        self.pushButton_stop.clicked.connect(self.stop)

    def init_window(self):

        self.is_pause = False
        self.is_stop = False

        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            shadow = QtWidgets.QGraphicsDropShadowEffect()
            shadow.setOffset(1, 3)
            shadow.setBlurRadius(10)
            shadow.setColor(Qt.black)
            button.setGraphicsEffect(shadow)
            button.setIconSize(QSize(20, 20))

        self.groupBox.findChildren(QLineEdit)

        sub_labs = self.groupBox.findChildren(QLabel)
        sub_edit = self.groupBox.findChildren(QLineEdit)
        for index, lab in enumerate(sub_labs):
            sub_edit[index].setText(globals()[lab.text()])

        text_x = self.config.get("text", "text_x")
        text_y = self.config.get("text", "text_y")
        self.lineEdit_3.setText(text_x)
        self.lineEdit_4.setText(text_y)

        qr_x = self.config.get("qrcode", "qr_x")
        qr_y = self.config.get("qrcode", "qr_y")
        self.lineEdit_5.setText(qr_x)
        self.lineEdit_6.setText(qr_y)
        qr_size = ["01", "02", "03", "04", "05", "06"]
        self.comboBox_3.addItems(qr_size)
        self.comboBox_3.setCurrentText(self.config.get("qrcode", "qr_size"))
        self.lineEdit_7.setText(self.config.get("model", "number"))

        self.lineEdit_8.setText(self.config.get("delay", "test_count"))
        self.lineEdit_9.setText(self.config.get("delay", "open_delay"))
        self.lineEdit_10.setText(self.config.get("delay", "return_delay"))
        self.lineEdit_11.setText(self.config.get("delay", "close_delay"))
        self.lineEdit_12.setText("5")
        self.lineEdit_12.RELATED_WIDGET = self.groupBox

        self.actionExit.setIcon(qtawesome.icon("mdi.exit-to-app", color='black'))
        self.actionSet_Transparency.setIcon(qtawesome.icon("mdi.invert-colors", color='black'))
        self.actionSet_Window_Style.setIcon(qtawesome.icon("msc.symbol-color", color='black'))
        self.actionSet_Font.setIcon(qtawesome.icon("ei.fontsize", color='black'))
        self.actionRun.setIcon(qtawesome.icon("mdi.reload", color='black'))

        self.actionAbout_Me.setIcon(qtawesome.icon("ei.info-circle", color='black'))
        self.pushButton_10.setIcon(qtawesome.icon("fa.circle", color='green', animation=qtawesome.Spin(self.pushButton_10)))
        self.pushButton_2.setIcon(qtawesome.icon("ri.printer-fill", color='red'))
        self.pushButton_2.setIconSize(QSize(*icon_size))
        self.pushButton.setIcon(qtawesome.icon("ri.loader-2-fill", color='black'))
        self.pushButton_3.setIcon(qtawesome.icon("msc.open-preview", color='black'))
        self.pushButton_4.setIcon(qtawesome.icon("ri.settings-5-fill", color='black'))
        self.pushButton_5.setIcon(qtawesome.icon("mdi.two-factor-authentication", color='black'))
        self.pushButton_6.setIcon(qtawesome.icon("ri.lock-fill", color='black'))
        self.pushButton_12.setIcon(qtawesome.icon("fa5s.fingerprint", color='black'))
        self.pushButton_7.setIcon(qtawesome.icon("fa5s.play", color='red', animation=qtawesome.Spin(self.pushButton_7)))
        self.pushButton_stop.setIcon(qtawesome.icon("ph.stop-fill", color='red'))
        self.pushButton_7.setIconSize(QSize(*icon_size))
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidget.setSelectionMode(QTableWidget.SingleSelection)
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tabWidget.setTabIcon(0, qtawesome.icon("mdi6.database-edit-outline", color='green'))
        self.tabWidget.setTabIcon(1, qtawesome.icon("mdi.apple-keyboard-command", color='green'))

        self.tabWidget.setTabEnabled(2, False)
        self.tabWidget.setTabEnabled(3, False)
        self.tabWidget.setTabEnabled(4, False)
        self.tabWidget.setTabEnabled(5, False)
        self.pushButton_3.setDisabled(True)

        self.load_font()
        self.load_ports()

    def reload(self):
        COM_PORTS = get_all_comports()
        if len(COM_PORTS) < 2:
            self.alert_message("Com Ports not ready! Please check!")
            return

        self.comboBox.addItems(COM_PORTS)
        self.comboBox_2.addItems(COM_PORTS)

    def com_port_check(self, port):
        try:
            con = SerialServer(com=port)
            con.close()
            return True
        except Exception:
            return False

    def update_commands(self):
        sub_labs = self.groupBox.findChildren(QLabel)
        sub_edit = self.groupBox.findChildren(QLineEdit)
        for index, lab in enumerate(sub_labs):
            globals()[lab.text()] = sub_edit[index].text()

    def set_delay(self):
        self.config.set("delay", "test_count", self.lineEdit_8.text())
        self.config.set("delay", "open_delay", self.lineEdit_9.text())
        self.config.set("delay", "return_delay", self.lineEdit_10.text())
        self.config.set("delay", "close_delay", self.lineEdit_11.text())
        self.config.write(open(self.config_path, "w"))

    def run(self):
        event.clear()
        t1 = threading.Thread(target=self.flow_start)
        if self.pushButton_7.text() == "Test Start":
            self.pushButton_7.setText("Test Pause")
            self.pushButton_7.setIcon(qtawesome.icon("fa5s.pause", color='red'))
            self.pushButton_stop.setVisible(True)
            self.pushButton_7.setIconSize(QSize(*icon_size))
            self.pushButton_stop.setIconSize(QSize(*icon_size))
            if self.is_pause:
                event.set()
            else:
                t1.start()
        elif self.pushButton_7.text() == "Test Pause":
            self.is_pause = True
            self.pushButton_7.setText("Test Start")
            self.pushButton_7.setIcon(qtawesome.icon("fa5s.play", color='red'))
            self.pushButton_7.setIconSize(QSize(*icon_size))
            buttons = self.main.findChildren(QPushButton)
            for button in buttons:
                if button != self.pushButton_7:
                    button.setDisabled(False)

    def stop(self):
        self.is_stop = True
        self.is_pause = False
        globals()['CONNECT'].close()
        self.pushButton_stop.setVisible(False)
        self.pushButton_7.setText("Test Start")
        self.pushButton_7.setIcon(qtawesome.icon("fa5s.play", color='red'))
        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            if button != self.pushButton_2 and button != self.pushButton_8 and button != self.pushButton_9 and button != self.pushButton_10:
                button.setDisabled(False)

    def flow_start(self):  #fisher
        output('\033[31m' + "[ EVENT REPORTING ] -> Flow Starting.....!" + '\033[0m')
        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            if button != self.pushButton_7 and button != self.pushButton_8 and button != self.pushButton_9 and button != self.pushButton_10 and button != self.pushButton_stop:
                button.setDisabled(True)

        count = str(self.config.get("delay", "test_count")) != self.lineEdit_8.text()
        open_delay = str(self.config.get("delay", "open_delay")) != self.lineEdit_9.text()
        return_delay = str(self.config.get("delay", "return_delay")) != self.lineEdit_10.text()
        close_delay = str(self.config.get("delay", "close_delay")) != self.lineEdit_11.text()

        if count or open_delay or return_delay or close_delay:
            self.set_delay()

        #   Here has clicked the start button. Ready to start the flow.
        #   Create serial connector and connect the com port.
        con = SerialServer(
            com=self.comboBox_2.itemText(self.comboBox_2.currentIndex()),
            #   Get the args set from app.
            output_to=None
        )
        globals()["CONNECT"] = con
        test_count = int(self.lineEdit_8.text())

        try:
            output('\033[31m' + "[ EVENT REPORTING ] -> MOTOR BACK.....!" + '\033[0m')
            con.Do(con.MOTOR_BACK)
            time.sleep(DELAY_TIME * 4)

            # Do Unlock all locks..
            output('\033[31m' + "[ EVENT REPORTING ] -> UNLOCK ALL LOCKS.....!" + '\033[0m')
            con.Do(con.OPEN_UNLOCK)
            time.sleep(DELAY_TIME * 4)

            output('\033[31m' + "[ EVENT REPORTING ] -> CHECKING S1 STATUS.....!" + '\033[0m')
            back = con.Do(con.QUERY_S1_STATUS)
            time.sleep(DELAY_TIME)

            output('\033[31m' + "[ EVENT REPORTING ] -> CHECKING S2 STATUS.....!" + '\033[0m')
            con.Do(con.QUERY_S2_STATUS)
            time.sleep(DELAY_TIME)

            # if s2_status[0] != self.lineEdit_12.text():  # S2 status 会等于Lock number.
            #     return  # popup error window

            while test_count:
                if self.is_pause:
                    event.wait()

                if self.is_stop:
                    self.is_stop = False
                    self.is_pause = False
                    return

                output('\033[31m'+"[ OUTER LOOP START ] -> Ready to exec the {} testing. ".format(test_count) + '\033[0m')
                output('\033[31m'+"[ EVENT REPORTING ] -> Exec that forward!" + '\033[0m')
                con.Do(con.MOTOR_FORWARD)
                time.sleep(DELAY_TIME)

                count = 10
                while count:
                    if self.is_pause:
                        event.wait()

                    if self.is_stop:
                        self.is_stop = False
                        self.is_pause = False
                        return

                    output('\033[31m'+"[ EVENT REPORTING ] -> Running the {} inner loop.".format(count) + '\033[0m')
                    output('\033[31m'+"[ EVENT REPORTING ] -> Ready to exec the  status checking." + '\033[0m')
                    time.sleep(2)
                    con.serial.reset_input_buffer()
                    output('\033[31m' + "[ EVENT REPORTING ] -> Check S2 status!" + '\033[0m')
                    s2_status = con.Do(con.QUERY_S2_STATUS, return_=True)
                    time.sleep(DELAY_TIME * 4)

                    output('\033[31m' + "[ EVENT REPORTING ] -> [ CURRENT VALUE: {}]: Check S2 status, if not 00, exec the related operations.".format(s2_status[0]) + '\033[0m')
                    output('\033[31m' + "[ EVENT REPORTING ] -> [ Return Data ]:  {}".format(s2_status) + '\033[0m')
                    output('\033[31m' + "[ EVENT REPORTING ] -> [ Return Data ]: {} != '{}' {}".format(s2_status[0], s2_status[0] != "F0", s2_status[0]) + '\033[0m')

                    if s2_status[0] != "FF":
                        time.sleep(int(self.lineEdit_11.text()))
                        output('\033[31m' + "[ EVENT REPORTING ] -> IF s2 status checking pass. exec motor stop!" + '\033[0m')
                        con.Do(con.MOTOR_STOP)
                        time.sleep(DELAY_TIME)
                        count -= 1
                        time.sleep(1)
                        output('\033[31m' + "[ EVENT REPORTING ] -> continue loop\n" + '\033[0m')
                    else:
                        output('\033[31m' + "[ EVENT REPORTING ] -> [ Return Data ]: {} != '{}' {}".format(s2_status[0],
                            s2_status[0] != "F0", s2_status[0]) + '\033[0m')
                        output(
                            '\033[31m' + "[ EVENT REPORTING ] -> S2 status checking pass. Break inner loop!" + '\033[0m')
                        break

                output('\033[31m' + "[ EVENT REPORTING ] -> Exec that motor back!" + '\033[0m')
                con.Do(con.MOTOR_BACK)
                time.sleep(int(self.lineEdit_10.text()))

                output('\033[31m' + "[ EVENT REPORTING ] -> Exec that motor stop!" + '\033[0m')
                con.Do(con.MOTOR_STOP)
                time.sleep(DELAY_TIME)

                output('\033[31m' + "[ EVENT REPORTING ] -> Exec that unlock all locks.!" + '\033[0m')
                con.Do(con.OPEN_UNLOCK)
                time.sleep(DELAY_TIME * 4)

                # TODO: Record locks status
                # ......

                test_count -= 1
                output('\033[31m' + "[ EVENT REPORTING ] -> Complete one loop\n\n\n" + '\033[0m')

            self.is_pause = False
            con.close()

        except NonContentError:
            output('\033[31m' + "\nDid not get any content from current com port. \n-\tCom ports are ready? \n-\tor select a wrong com port?" + '\033[0m')
            buttons = self.main.findChildren(QPushButton)
            for button in buttons:
                if button != self.pushButton_2 and button != self.pushButton_8 and button != self.pushButton_9 and button != self.pushButton_10:
                    button.setDisabled(False)
            self.comboBox.clear()
            self.comboBox_2.clear()
            self.comboBox.setDisabled(False)
            self.comboBox_2.setDisabled(False)
            self.comboBox.addItems(COM_PORTS)
            self.comboBox_2.addItems(COM_PORTS)
            return

        self.pushButton_7.setText("Test Start")
        self.pushButton_7.setIcon(qtawesome.icon("fa5s.play", color='Red'))
        self.pushButton_7.setIconSize(QSize(*icon_size))
        self.pushButton_stop.setVisible(False)

        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            if button != self.pushButton_7 and button != self.pushButton_8 and button != self.pushButton_9 and button != self.pushButton_10:
                button.setDisabled(False)

    def menushow(self, pos):
        row = self.tableWidget.rowAt(pos.y())
        column = self.tableWidget.columnAt(pos.x())
        if self.tableWidget.item(row, column) in self.tableWidget.selectedItems():
            menu = QMenu(self.tableWidget)
            re_name = menu.addAction("Rename Column")
            re_name.setIcon(qtawesome.icon("mdi.database-edit", color='gray'))
            export = menu.addAction("Export")
            export.setIcon(qtawesome.icon("mdi.database-export", color='gray'))
            del_column = menu.addAction("Delete")
            del_column.setIcon(qtawesome.icon("fa.remove", color='gray'))
            action = menu.exec_(self.tableWidget.mapToGlobal(pos))
            try:
                if action.text() == "Export":
                    t = threading.Thread(target=self.__export)
                    t.start()
                    t.join()
                elif action.text() == "Delete":
                    self.__delete()
                elif action.text() == "Rename Column":
                    try:
                        self.rename_column()
                    except sqlite3.OperationalError:
                        ...
            except AttributeError:
                pass

    def rename_column(self):
        name, ok = QInputDialog.getText(self, 'Rename Page', 'Please enter new name:')
        cur = DBConnector()
        if name == "":
            return
        cur.rename(prefix=name)
        self.view_datas()

    def __export(self):
        cursor = DBConnector()
        workbook = xlwt.Workbook(encoding="utf-8")
        sheet = workbook.add_sheet("device")
        header = cursor.get_columns()
        for i in header:
            sheet.write(0, header.index(i), i)

        cursor.select()
        datas = []
        for data in cursor.datas:
            datas.append(data)

        for d in range(len(datas)):
            for index, d1 in enumerate(datas[d]):
                sheet.write(d + 1, index, datas[d][index])

        savepath = "device.csv"
        workbook.save(savepath)

        cursor.close()

    def __delete(self):
        sn = self.tableWidget.item(self.tableWidget.currentRow(), 1).text()
        cursor = DBConnector()
        cursor.delete(sn)
        cursor.close()

        self.view_datas()

    def authorize(self):
        try:
            con = SerialServer(
                com=self.comboBox_2.itemText(self.comboBox_2.currentIndex()),
                #   Get the args set from app.
                output_to=None
            )
        except Exception:
            self.alert_message("Com Port not ready!")
            return
        try:
            # Do auth
            lock_number = self.lineEdit_12.text()
            lock_number = str(hex(int(lock_number)))[2:].rjust(2, '0').upper()
            con.AUTH = con.AUTH + f" {lock_number}"
            con.AUTH = con.AUTH + " {}".format(con.checksum(con.AUTH.split(" ")[2:]).upper())
            auth = con.Do(con.AUTH, return_=True)
            output("Return code: " + auth, output_to=None)
        except NonContentError:
            self.alert_message("Did not get any content from current com port. \n-\tCom ports are ready? \n-\tor select a wrong com port?")
            return

    def binding(self):
        try:
            try:
                con = SerialServer(
                    com=self.comboBox_2.itemText(self.comboBox_2.currentIndex()),
                    #   Get the args set from app.
                    output_to=None
                )
            except Exception:
                self.alert_message("Com Port not ready!")
                return

            try:
                con.cmd_base = con.READ_SIM_ID.split(" ")  # .split(" ")  Convert command to arrary
                con.send()
                time.sleep(0.5)

                con.cmd_base = con.BINDING.split(" ")  # .split(" ")  Convert command to arrary
                con.send()
                time.sleep(0.5 * 14)

                con.cmd_base = con.BINDING_COMPLETE.split(" ")
                con.send()
                time.sleep(0.5 * 4)

                con.serial.reset_input_buffer()

                con.cmd_base = con.LOCK_NUMBER.split(" ")
                con.send()
                time.sleep(0.5)
                self.lineEdit_12.setText(str(int("0x" + con.recv().split(" ")[-2], base=16)))
                self.lineEdit_12.setDisabled(True)

            except NonContentError:
                self.alert_message(
                    "Did not get any content from current com port. \n-\tCom ports are ready? \n-\tor select a wrong com port?")
                return
        except Exception as ex:
            self.alert_message(message="Raise error here!")

    def painter(self):
        text_x = int(self.lineEdit_3.text())
        text_y = int(self.lineEdit_4.text())

        qr_x = int(self.lineEdit_5.text())
        qr_y = int(self.lineEdit_6.text())

        class PainterQwidget(QWidget):

            def paintEvent(self, a0: QtGui.QPaintEvent) -> None:
                qp = QPainter()
                qp.begin(self)
                qp.setPen(QColor(Qt.black))
                qp.setFont(QFont('Arial', 13))
                line_height = 8
                qp.drawText(text_x * 1.88, 28 + line_height, "SN:F0F23600000000067700000011")
                qp.drawText(text_x * 1.88, 48 + line_height, "MODEL CODE:")
                qp.drawText(text_x * 1.88, 68 + line_height, "P604BFA06XXA")
                qp.drawText(text_x * 1.88, 88 + line_height, "INPUT:DC5V/2A")
                qp.drawText(text_x * 1.88, 108 + line_height, "WWW.MOCOCHI.COM")
                qp.drawText(text_x * 1.88, 128 + line_height, "MADE IN CHINA\t            10/23")
                qp.fillRect(qr_x - 30, qr_y - 20, 70, 70, QBrush(Qt.SolidPattern))
                qp.end()

        width = 310
        height = 165
        self.paint = PainterQwidget()
        self.paint.setStyleSheet(
            """
            PainterQwidget{
                background-color: white;
            }
            """
        )
        self.label_draw = Painter()
        self.paint.setFixedSize(width, height)
        # self.paint.setWindowFlag(QtCore.Qt.WindowCloseButtonHint, False) # disable close button.
        self.paint.setWindowIcon(qtawesome.icon("ri.printer-fill", color='red'))
        self.label_draw.setupUi(self.paint)
        self.paint.show()

    def setLabelLocation(self):
        self.config.set("text", "text_x", self.lineEdit_3.text())
        self.config.set("text", "text_y", self.lineEdit_4.text())

        self.config.set("qrcode", "qr_x", self.lineEdit_5.text())
        self.config.set("qrcode", "qr_y", self.lineEdit_6.text())

        size = self.comboBox_3.itemText(self.comboBox_3.currentIndex())
        self.config.set("qrcode", "qr_size", size)

        model_number = self.lineEdit_7.text()
        self.config.set("model", "number", model_number)
        self.config.write(open(self.config_path, "w"))

    def connector(self):
        connect = Command(com_port=self.comboBox.itemText(self.comboBox.currentIndex()),
                          text_x=int(self.lineEdit_3.text()),
                          text_y=int(self.lineEdit_4.text()),
                          qr_x=int(self.lineEdit_5.text()),
                          qr_y=int(self.lineEdit_6.text()),
                          qr_size=int(self.comboBox_3.itemText(self.comboBox_3.currentIndex())),
        )
        return connect

    def sendCommand(self, data):
        sn = "SN:" + data
        model_code = "MODEL CODE:"
        model_code_content = self.lineEdit_7.text()
        input = "INPUT:DC5V/2A"
        access = "WWW.MOCOCHI.COM"
        made = "MADE IN CHINA"
        date = str(datetime.date(datetime.now()).month) + "/" + str(datetime.date(datetime.now()).year)[2:]
        made_date = made + "         " + date
        connect = self.connector()
        command = connect.gen_command(
            (connect.gen_text_command, sn),
            (connect.gen_text_command, model_code),
            (connect.gen_text_command, model_code_content),
            (connect.gen_text_command, input),
            (connect.gen_text_command, access),
            (connect.gen_text_command, made_date),
            (connect.gen_QR_command, sn.split(":")[-1]),
        )
        command = convert_to_hex(command)
        connect.send(command)
        status = connect.get_print_status()
        connect.close()

        return status

    def print_thread(self):
        # event.clear()
        t2 = threading.Thread(target=self.print)
        t2.start()

        # while True:
        #     if event.is_set():
        #         self.alert_message("Check sum checked failure. ")
        #         break
        #     time.sleep(1)

    def print(self):
        # Disable all widgets.
        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            if button != self.pushButton_2 and button != self.pushButton_8 and button != self.pushButton_9 and button != self.pushButton_10:
                button.setDisabled(True)

        commands = ['MSN', 'CCID', 'FID'] + [key for key in globals().keys() if "LSN" in key][:int(self.lineEdit_12.text())]
        try:
            con = SerialServer(
                com=self.config.get("ports", "taillock_port"),
                #   Get the args set from app.
                output_to=None
            )
        except AttributeError:
            con = SerialServer(
                com=self.config.get("ports", "taillock_port"),
                #   Get the args set from app.
                output_to=None
            )
        finally:
            return_data = {}
            output("Ready to read device data.....", output_to=None)
            for count, command in enumerate(commands):
                output("#######################   The next data   #######################", output_to=None)
                try:
                    con.cmd_base = globals()[command].split(" ")
                    con.send()
                    back = con.recv()

                    if back == "":
                        return
                    return_data[command] = back.replace(" ", "")
                    return_ = " ".join(back.split(" ")[5:-1])
                    return_data[command] = return_.replace(" ", "")

                    # last_check_sum = back.split(" ")[-1]
                    # check_sum_data = " ".join(back.split(" ")[2:-1])  # check sum data 取返回的数据中的第二个bite 到 最后一个byte 之间的所有bytes来计算结果
                    # check_sum = con.checksum(check_sum_data.split(" "))  # 这里拿到数据进行check sum 的计算。 计算的结果必须和返回的数据的最后一个byte 相等。
                    # if check_sum.upper() != last_check_sum: # 如果check sum 不相等，弹出窗口。程序终止
                    #     event.set()
                    #     return
                except NonContentError as ex:
                    output('\033[31m' + "\nDid not get any content from current com port. \n-\tCom ports are ready? \n-\tor select a wrong com port?" + '\033[0m')
                    buttons = self.main.findChildren(QPushButton)
                    for button in buttons:
                        if button != self.pushButton_2 and button != self.pushButton_8 and button != self.pushButton_9 and button != self.pushButton_10:
                            button.setDisabled(False)
                    self.comboBox.clear()
                    self.comboBox_2.clear()
                    self.comboBox.setDisabled(False)
                    self.comboBox_2.setDisabled(False)
                    self.comboBox.addItems(COM_PORTS)
                    self.comboBox_2.addItems(COM_PORTS)
                    return

            return_data["MODEL_CODE"] = self.lineEdit_7.text()

            result = []
            for item in return_data.keys():
                if item == 'CCID':
                    continue

                if return_data[item] != "":
                    result.append(True)

            sn = return_data["MSN"].upper()
            if all(result):
                cur = DBConnector(**return_data)
                cur.select()
                all_msn = []
                for d in cur.datas:
                    all_msn.append(d[1])

                if sn in all_msn:
                    cur.delete(sn)

                cur.insert(return_data["MSN"])
                cur.update(sn)
                cur.close()

                self.view_datas()
            else:
                return

        try:
            self.sendCommand(sn.replace(" ", ""))
        except AttributeError:
            ...
        except ValueError as ex:
            output(message="No content..")

        buttons = self.main.findChildren(QPushButton)
        for button in buttons:
            if button != self.pushButton_2 and button != self.pushButton_8 and button != self.pushButton_9 and button != self.pushButton_10:
                button.setDisabled(False)

    def alert_message(self, message):
        messageBox = QMessageBox(QMessageBox.Icon(3), "Error", message, QMessageBox.Ok, self)
        messageBox.button(QMessageBox.Ok).setText("yes")
        reply = messageBox.exec()
        from utils import log
        if reply == QMessageBox.Ok:
            log.output(message=message)

    def view_datas(self, headers=None):
        cur = DBConnector()
        self.tableWidget.clear()
        columns = cur.get_columns()
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        cur.select()
        datas = []
        for d in cur.datas:
            datas.append(d)

        if not datas:
            self.tableWidget.setRowCount(0)
            self.tableWidget.setColumnCount(0)
            return

        try:
            self.tableWidget.setRowCount(len(datas))
            self.tableWidget.setColumnCount(len(datas[0]))
            self.tableWidget.setHorizontalHeaderLabels(headers or columns)
        except Exception:
            pass

        for index, d in enumerate(datas):
            for in_, v in enumerate(d):
                self.tableWidget.setColumnWidth(in_, 200)
                self.tableWidget.setItem(index, in_, QTableWidgetItem(v))

        cur.close()

    def load_ports(self):

        print_port = self.config.get("ports", "print_port")
        taillock_port = self.config.get("ports", "taillock_port")


        try:
            con = SerialServer(com=print_port)
            con.close()
        except Exception:
            print_port = ""

        try:
            con = SerialServer(com=taillock_port)
            con.close()
        except Exception:
            taillock_port = ""

        if COM_PORTS == []:
            self.alert_message(message="No com port ready, Please check")

        if print_port == "" or taillock_port == "":
            try:
                self.comboBox.addItems(COM_PORTS)
                self.comboBox_2.addItems(COM_PORTS)

                self.lineEdit.setText("115200")
                self.lineEdit_2.setText("115200")

                self.pushButton_8.setIcon(qtawesome.icon("fa.circle", color='red'))
                self.pushButton_9.setIcon(qtawesome.icon("fa.circle", color='red'))
            except serial.SerialException:
                ...
        else:
            self.comboBox.addItems(COM_PORTS)
            self.comboBox.setCurrentIndex(COM_PORTS.index(print_port))
            self.comboBox_2.addItems(COM_PORTS)
            self.comboBox_2.setCurrentIndex(COM_PORTS.index(taillock_port))
            self.lineEdit.setText("115200")
            self.lineEdit_2.setText("115200")
            self.lineEdit.setDisabled(True)
            self.lineEdit_2.setDisabled(True)
            self.pushButton_8.setIcon(qtawesome.icon("fa.circle", color='green'))
            self.pushButton_9.setIcon(qtawesome.icon("fa.circle", color='green'))

    def set_comport(self):
        current_widget = self.main.focusWidget()
        current = current_widget.currentIndex()
        current_widget.setCurrentIndex(current)

        if self.comboBox.itemText(self.comboBox.currentIndex()) == self.comboBox_2.itemText(self.comboBox_2.currentIndex()):
            self.alert_message("The com ports must be different !!!")
            self.pushButton_8.setIcon(qtawesome.icon("fa.circle", color='red'))
            self.pushButton_9.setIcon(qtawesome.icon("fa.circle", color='red'))

        self.config.set("ports", "print_port", self.comboBox.itemText(self.comboBox.currentIndex()))
        self.config.set("ports", "taillock_port", self.comboBox_2.itemText(self.comboBox_2.currentIndex()))
        self.config.write(open(self.config_path, "w"))

        try:
            con_list = [
                self.config.get("ports", "print_port"),
                self.config.get("ports", "taillock_port"),
            ]

            is_open_result = []

            for port in con_list:
                try:
                    con = SerialServer(com=port)
                    is_open_result.append(con.is_open())
                    con.close()
                except TypeError as ex:
                    self.alert_message(message=ex)

            if all(is_open_result):
                self.pushButton_8.setIcon(qtawesome.icon("fa.circle", color='green'))
                self.pushButton_9.setIcon(qtawesome.icon("fa.circle", color='green'))
        except serial.serialutil.SerialException as ex:
            pass

    def load_font(self):
        font = QFont(*eval(self.config.get("font", "family")))
        if font != "":
            labels = self.main.findChildren(QLabel)
            for label in labels:
                label.setFont(font)

            buttons = self.main.findChildren(QPushButton)
            for button in buttons:
                button.setFont(font)

            widgets = self.main.findChildren(QWidget)
            for widget in widgets:
                widget.setFont(font)

    def set_family_font(self):
        font, ok = QFontDialog.getFont()

        if ok:
            labels = self.main.findChildren(QLabel)
            for label in labels:
                label.setFont(font)

            buttons = self.main.findChildren(QPushButton)
            for button in buttons:
                button.setFont(font)

            widgets = self.main.findChildren(QWidget)
            for widget in widgets:
                widget.setFont(font)

            self.config.set("font", "family", str((font.family(), int(font.key().split(",")[1]))))
            self.config.write(open(self.config_path, "w"))

    def reset_style(self):
        self.start_color = ["#CCFBFF", "#EAD6EE", "#EEBD89", "#F9957F", "#EAE5C9", "#EF33B1", "#9FA5D5", "#C973FF",
                            "#0C7BB3"]
        self.end_color = ["#EF96C5", "#A0F1EA", "#D13ABD", "#F2F5D0", "#6CC6CB", "#F6E6BC", "#E8F5C8", "#AEBAF8",
                          "#F2BAE8"]
        color = random.choice(self.start_color)
        style = """
                QMainWindow{
                    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 %s,stop:.9 %s);
                    border-radius: 7px;
                }
                QPushButton#pushButton_9 {
                    background-color: transparent;
                }
                
                QPushButton#pushButton_8 {
                    background-color: transparent;
                }
                
                QPushButton#pushButton_10 {
                    background-color: transparent;
                }
                
                QPushButton#pushButton_2 {
                    padding: 20px;
                }
                QPushButton#pushButton_7 {
                    padding: 15px;
                    background-color: transparent;
                    border: 0px;
                }
                
                QPushButton#pushButton_2 {
                    padding: 15px;
                    background-color: transparent;
                    border: 0px;
                }
                
                QPushButton#pushButton_2:pressed {
                    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:3,stop:0 #FFFFFF,stop:.9 transparent);
                    border-radius: 15px;
                }
                
                QPushButton#pushButton_7:pressed {
                    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:3,stop:0 #FFFFFF,stop:.9 transparent);
                    border-radius: 25px;
                }
                QPushButton#pushButton_7 {
                    padding: 20px;
                }
                QTabWidget::pane{border-width:1px;border-color:gray;border-style: outset;background-color:white}
                QTabBar::tab{width:80px; border-width:1px;border-color:gray;border-bottom-color: #C2C7CB;border-top-left-radius: 15px;border-top-right-radius: 5px; font: 9px ; padding: 5px;}
                QTabBar::tab:first:selected{ margin-left: 0; font-weight: bold;margin-right: 0;color: black}
                QTabBar::tab:first:!selected {color: white;margin-left: 0; font-weight: bold;margin-right: 0;background-color:#DCDCDC}
                QTabBar::tab:middle:selected{ margin-left: 0; margin-right: 0;font-weight: bold;color: black}
                QTabBar::tab:middle:!selected {color: white;margin-left: 0; font-weight: bold;margin-right: 0;background-color:#DCDCDC}
                QTabBar::tab:last:selected{ margin-left: 0; margin-right: 0;font-weight: bold;color: black}
                QTabBar::tab:last:!selected {color: white;margin-left: 0; font-weight: bold;margin-right: 0;background-color:#DCDCDC}
                """ % (color, self.end_color[self.start_color.index(color)])
        self.main.setStyleSheet(style)

        index = self.start_color.index(color)
        self.start_color.pop(index)
        self.end_color.pop(index)

        if len(self.start_color) == 0:
            self.start_color = ["#CCFBFF", "#EAD6EE", "#EEBD89", "#F9957F", "#EAE5C9", "#EF33B1", "#9FA5D5", "#C973FF",
                                "#0C7BB3"]
            self.end_color = ["#EF96C5", "#A0F1EA", "#D13ABD", "#F2F5D0", "#6CC6CB", "#F6E6BC", "#E8F5C8", "#AEBAF8",
                              "#F2BAE8"]

    def set_Transparency(self):
        name, ok = QInputDialog.getText(self, 'Rename Page', 'Please enter new value:')
        try:
            self.main.setWindowOpacity(float(name))
        except ValueError:
            ...

    def exit(self):
        sys.exit(11)